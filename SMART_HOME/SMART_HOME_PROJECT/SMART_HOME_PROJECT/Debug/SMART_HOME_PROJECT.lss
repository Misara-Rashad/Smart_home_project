
SMART_HOME_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  000001b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000e8  0000082c  2**0
                  ALLOC
  2 .bss          0000000a  00800060  00800060  000016b6  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000016b6  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000001c  00000000  00000000  000016e5  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00001701  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007429  00000000  00000000  000019c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012a4  00000000  00000000  00008dea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026cc  00000000  00000000  0000a08e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c4  00000000  00000000  0000c75c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a0  00000000  00000000  0000cf20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c55  00000000  00000000  0000d2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000ff15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  0000142e  0000142e  000015e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00010190  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .data.HKEYPAD_arrayofkeypads 00000020  00800097  00001469  0000161d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 16 .text.keypad_init 000000d2  00000d96  00000d96  00000f4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.keypadgetnumber 00000136  00000a38  00000a38  00000bec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .data.keypad  00000010  008000b7  00001489  0000163d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 19 .data.HLCD_arrayoflcds 0000002d  0080006a  0000143c  000015f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 20 .text.lcd_write_data 00000246  00000678  00000678  0000082c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.lcd_init 0000017a  000008be  000008be  00000a72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LCDstring 00000052  00001156  00001156  0000130a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.lcdclear 0000000e  00001414  00001414  000015c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.u8check_if_admin_set_pass 00000040  000012d8  000012d8  0000148c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.u8set_admin_pass 0000006c  00001020  00001020  000011d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.u8enter_admin_pass 0000006c  0000108c  0000108c  00001240  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.u8check_admin_pass 0000009a  00000f12  00000f12  000010c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.u8admin_control 00000590  000000e8  000000e8  0000029c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.main    00000046  00001292  00001292  00001446  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .data.choose_op_level 0000000b  008000f3  000014c5  00001679  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 31 .data.status  00000008  00800108  000014da  0000168e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 32 .data.off     00000004  0080011e  000014ea  0000169e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 33 .data.on      00000003  00800136  000014fe  000016b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 34 .data.set_admin_pass 00000010  008000c7  00001499  0000164d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 35 .data.choose  0000000d  008000e6  000014b8  0000166c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 36 .data.right_pass 00000008  00800110  000014e2  00001696  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 37 .data.error_message 0000000f  008000d7  000014a9  0000165d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 38 .data.enter_password_message 0000000a  008000fe  000014d0  00001684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 39 .bss.wrong_pass_flag 00000001  0080013d  0080013d  000016b6  2**0
                  ALLOC
 40 .bss.counter_for_wrong_pass_entered 00000001  0080013e  0080013e  000016b6  2**0
                  ALLOC
 41 .bss.lcd_flag 00000001  0080013f  0080013f  000016b6  2**0
                  ALLOC
 42 .bss.sequence 00000001  00800140  00800140  000016b6  2**0
                  ALLOC
 43 .bss.entered_pass 00000001  00800141  00800141  000016b6  2**0
                  ALLOC
 44 .bss.saved_pass 00000001  00800142  00800142  000016b6  2**0
                  ALLOC
 45 .bss.address_in_eeprom 00000002  00800139  00800139  000016b6  2**0
                  ALLOC
 46 .bss.counter_in_eeprom 00000001  00800143  00800143  000016b6  2**0
                  ALLOC
 47 .data.value_in_keypad 00000001  00800144  00001501  000016b5  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 48 .bss.x        00000004  00800122  00800122  000016b6  2**0
                  ALLOC
 49 .text.pin_direction 00000114  00000b6e  00000b6e  00000d22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.pin_value 00000114  00000c82  00000c82  00000e36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.pin_get_value 000000aa  00000e68  00000e68  0000101c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.EEPROM_WRITE_BYTE 00000026  000013d8  000013d8  0000158c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.EEPROM_READ_BYTE_MEEPROM 0000002e  00001352  00001352  00001506  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.__vector_1 0000004e  000011a8  000011a8  0000135c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.__vector_2 0000004e  000011f6  000011f6  000013aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.__vector_3 0000004e  00001244  00001244  000013f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .bss.EXINT_CALLBACK 00000006  00800118  00800118  000016b6  2**0
                  ALLOC
 58 .text.spi_master_init 00000074  00000fac  00000fac  00001160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.spi_master_transmit_byte 0000002a  000013ae  000013ae  00001562  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.spi_master_receive_byte 0000003a  00001318  00001318  000014cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .data.SCK_PIN 00000004  00800126  000014ee  000016a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 62 .data.MISO_PIN 00000004  0080012a  000014f2  000016a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 63 .data.MOSI_PIN 00000004  0080012e  000014f6  000016aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 64 .data.SS_PIN  00000004  00800132  000014fa  000016ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 65 .text.__vector_11 0000002e  00001380  00001380  00001534  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.__vector_7 0000005e  000010f8  000010f8  000012ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .bss.u16counter_of_ovf_timer0 00000002  0080013b  0080013b  000016b6  2**0
                  ALLOC
 68 .text.libgcc  0000000c  00001422  00001422  000015d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.__dummy_fini 00000002  00001436  00001436  000015ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.__dummy_funcs_on_exit 00000002  00001438  00001438  000015ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.__dummy_simulator_exit 00000002  0000143a  0000143a  000015ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.exit    00000016  000013fe  000013fe  000015b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text._Exit   00000004  00001432  00001432  000015e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__vector_1>
   8:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__vector_2>
   c:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__vector_3>
  10:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  14:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  18:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  1c:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <__vector_7>
  20:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  24:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  28:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  2c:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__vector_11>
  30:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  34:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  38:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  3c:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  40:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  44:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  48:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  4c:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  50:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__bad_interrupt>
  54:	9d 00       	.word	0x009d	; ????
  56:	f0 00       	.word	0x00f0	; ????
  58:	42 01       	movw	r8, r4
  5a:	95 01       	movw	r18, r10
  5c:	e8 01       	movw	r28, r16
  5e:	3b 02       	muls	r19, r27
  60:	8e 02       	muls	r24, r30
  62:	e1 02       	muls	r30, r17

00000064 <.dinit>:
  64:	00 60       	ori	r16, 0x00	; 0
  66:	00 6a       	ori	r16, 0xA0	; 160
  68:	80 00       	.word	0x0080	; ????
  6a:	6a 01       	movw	r12, r20
  6c:	18 00       	.word	0x0018	; ????
  6e:	14 3c       	cpi	r17, 0xC4	; 196
  70:	01 18       	sub	r0, r1
  72:	01 1e       	adc	r0, r17
  74:	80 01       	movw	r16, r0
  76:	1e 01       	movw	r2, r28
  78:	22 00       	.word	0x0022	; ????
  7a:	14 ea       	ldi	r17, 0xA4	; 164
  7c:	01 22       	and	r0, r17
  7e:	01 26       	eor	r0, r17
  80:	80 01       	movw	r16, r0
  82:	26 01       	movw	r4, r12
  84:	39 00       	.word	0x0039	; ????
  86:	14 ee       	ldi	r17, 0xE4	; 228
  88:	01 39       	cpi	r16, 0x91	; 145
  8a:	01 44       	sbci	r16, 0x41	; 65
  8c:	80 01       	movw	r16, r0
  8e:	44 01       	movw	r8, r8
  90:	45 00       	.word	0x0045	; ????
  92:	15 01       	movw	r2, r10

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf e5       	ldi	r28, 0x5F	; 95
  9a:	d8 e0       	ldi	r29, 0x08	; 8
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	e4 e6       	ldi	r30, 0x64	; 100
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	17 c0       	rjmp	.+46     	; 0xd6 <__do_clear_bss+0x8>
  a8:	b5 91       	lpm	r27, Z+
  aa:	a5 91       	lpm	r26, Z+
  ac:	35 91       	lpm	r19, Z+
  ae:	25 91       	lpm	r18, Z+
  b0:	05 91       	lpm	r16, Z+
  b2:	07 fd       	sbrc	r16, 7
  b4:	0c c0       	rjmp	.+24     	; 0xce <__do_clear_bss>
  b6:	95 91       	lpm	r25, Z+
  b8:	85 91       	lpm	r24, Z+
  ba:	ef 01       	movw	r28, r30
  bc:	f9 2f       	mov	r31, r25
  be:	e8 2f       	mov	r30, r24
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x20>
  ca:	fe 01       	movw	r30, r28
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <__do_clear_bss+0x8>

000000ce <__do_clear_bss>:
  ce:	1d 92       	st	X+, r1
  d0:	a2 17       	cp	r26, r18
  d2:	b3 07       	cpc	r27, r19
  d4:	e1 f7       	brne	.-8      	; 0xce <__do_clear_bss>
  d6:	e4 39       	cpi	r30, 0x94	; 148
  d8:	f4 07       	cpc	r31, r20
  da:	31 f7       	brne	.-52     	; 0xa8 <__do_copy_data+0x8>
  dc:	0e 94 49 09 	call	0x1292	; 0x1292 <main>
  e0:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <exit>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>

Disassembly of section .text:

0000142e <__bad_interrupt>:
    142e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.keypad_init:

00000d96 <keypad_init>:
					{'1','2','3','-'},
					{'C','0','=','+'}	};
	
	
tenumFncErrorState keypad_init(void)
{
 d96:	8f 92       	push	r8
 d98:	9f 92       	push	r9
 d9a:	af 92       	push	r10
 d9c:	bf 92       	push	r11
 d9e:	cf 92       	push	r12
 da0:	df 92       	push	r13
 da2:	ef 92       	push	r14
 da4:	ff 92       	push	r15
 da6:	1f 93       	push	r17
 da8:	cf 93       	push	r28
 daa:	df 93       	push	r29
	tenumFncErrorState error=LSTY_EXECUTED_SUCCESSFULLY;
	u8 i;
	for(i=0;i<NUM_OF_KEYPADS;i++)
 dac:	10 e0       	ldi	r17, 0x00	; 0
 dae:	4c c0       	rjmp	.+152    	; 0xe48 <keypad_init+0xb2>
	{
		pin_direction(&HKEYPAD_arrayofkeypads[i].rows[0]);
 db0:	80 e2       	ldi	r24, 0x20	; 32
 db2:	18 9f       	mul	r17, r24
 db4:	e0 01       	movw	r28, r0
 db6:	11 24       	eor	r1, r1
 db8:	ce 01       	movw	r24, r28
 dba:	89 56       	subi	r24, 0x69	; 105
 dbc:	9f 4f       	sbci	r25, 0xFF	; 255
 dbe:	4c 01       	movw	r8, r24
 dc0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
		pin_direction(&HKEYPAD_arrayofkeypads[i].rows[1]);
 dc4:	ce 01       	movw	r24, r28
 dc6:	85 56       	subi	r24, 0x65	; 101
 dc8:	9f 4f       	sbci	r25, 0xFF	; 255
 dca:	5c 01       	movw	r10, r24
 dcc:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
		pin_direction(&HKEYPAD_arrayofkeypads[i].rows[2]);
 dd0:	ce 01       	movw	r24, r28
 dd2:	81 56       	subi	r24, 0x61	; 97
 dd4:	9f 4f       	sbci	r25, 0xFF	; 255
 dd6:	6c 01       	movw	r12, r24
 dd8:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
		pin_direction(&HKEYPAD_arrayofkeypads[i].rows[3]);
 ddc:	ce 01       	movw	r24, r28
 dde:	8d 55       	subi	r24, 0x5D	; 93
 de0:	9f 4f       	sbci	r25, 0xFF	; 255
 de2:	7c 01       	movw	r14, r24
 de4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
		
		pin_value(&HKEYPAD_arrayofkeypads[i].rows[0]);
 de8:	c4 01       	movw	r24, r8
 dea:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
		pin_value(&HKEYPAD_arrayofkeypads[i].rows[1]);
 dee:	c5 01       	movw	r24, r10
 df0:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
		pin_value(&HKEYPAD_arrayofkeypads[i].rows[2]);
 df4:	c6 01       	movw	r24, r12
 df6:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
		pin_value(&HKEYPAD_arrayofkeypads[i].rows[3]);
 dfa:	c7 01       	movw	r24, r14
 dfc:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>

		pin_direction(&HKEYPAD_arrayofkeypads[i].colums[0]);
 e00:	ce 01       	movw	r24, r28
 e02:	89 55       	subi	r24, 0x59	; 89
 e04:	9f 4f       	sbci	r25, 0xFF	; 255
 e06:	5c 01       	movw	r10, r24
 e08:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
		pin_direction(&HKEYPAD_arrayofkeypads[i].colums[1]);
 e0c:	ce 01       	movw	r24, r28
 e0e:	85 55       	subi	r24, 0x55	; 85
 e10:	9f 4f       	sbci	r25, 0xFF	; 255
 e12:	6c 01       	movw	r12, r24
 e14:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
		pin_direction(&HKEYPAD_arrayofkeypads[i].colums[2]);
 e18:	ce 01       	movw	r24, r28
 e1a:	81 55       	subi	r24, 0x51	; 81
 e1c:	9f 4f       	sbci	r25, 0xFF	; 255
 e1e:	7c 01       	movw	r14, r24
 e20:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
		pin_direction(&HKEYPAD_arrayofkeypads[i].colums[3]);
 e24:	cd 54       	subi	r28, 0x4D	; 77
 e26:	df 4f       	sbci	r29, 0xFF	; 255
 e28:	ce 01       	movw	r24, r28
 e2a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>

		pin_value(&HKEYPAD_arrayofkeypads[i].colums[0]);
 e2e:	c5 01       	movw	r24, r10
 e30:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
		pin_value(&HKEYPAD_arrayofkeypads[i].colums[1]);
 e34:	c6 01       	movw	r24, r12
 e36:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
		pin_value(&HKEYPAD_arrayofkeypads[i].colums[2]);
 e3a:	c7 01       	movw	r24, r14
 e3c:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
		pin_value(&HKEYPAD_arrayofkeypads[i].colums[3]);
 e40:	ce 01       	movw	r24, r28
 e42:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
	
tenumFncErrorState keypad_init(void)
{
	tenumFncErrorState error=LSTY_EXECUTED_SUCCESSFULLY;
	u8 i;
	for(i=0;i<NUM_OF_KEYPADS;i++)
 e46:	1f 5f       	subi	r17, 0xFF	; 255
 e48:	11 23       	and	r17, r17
 e4a:	09 f4       	brne	.+2      	; 0xe4e <keypad_init+0xb8>
 e4c:	b1 cf       	rjmp	.-158    	; 0xdb0 <keypad_init+0x1a>
		pin_value(&HKEYPAD_arrayofkeypads[i].colums[2]);
		pin_value(&HKEYPAD_arrayofkeypads[i].colums[3]);

	}
	return error;
}
 e4e:	80 e0       	ldi	r24, 0x00	; 0
 e50:	df 91       	pop	r29
 e52:	cf 91       	pop	r28
 e54:	1f 91       	pop	r17
 e56:	ff 90       	pop	r15
 e58:	ef 90       	pop	r14
 e5a:	df 90       	pop	r13
 e5c:	cf 90       	pop	r12
 e5e:	bf 90       	pop	r11
 e60:	af 90       	pop	r10
 e62:	9f 90       	pop	r9
 e64:	8f 90       	pop	r8
 e66:	08 95       	ret

Disassembly of section .text.keypadgetnumber:

00000a38 <keypadgetnumber>:



tenumFncErrorState keypadgetnumber(KEYPAD_T* pstructcpy,pu8 pu8cpy_value)
{
 a38:	6f 92       	push	r6
 a3a:	7f 92       	push	r7
 a3c:	8f 92       	push	r8
 a3e:	9f 92       	push	r9
 a40:	af 92       	push	r10
 a42:	bf 92       	push	r11
 a44:	cf 92       	push	r12
 a46:	df 92       	push	r13
 a48:	ef 92       	push	r14
 a4a:	ff 92       	push	r15
 a4c:	0f 93       	push	r16
 a4e:	1f 93       	push	r17
 a50:	cf 93       	push	r28
 a52:	df 93       	push	r29
 a54:	0f 92       	push	r0
 a56:	cd b7       	in	r28, 0x3d	; 61
 a58:	de b7       	in	r29, 0x3e	; 62
	tenumFncErrorState error=LSTY_EXECUTED_SUCCESSFULLY;
	if (NULL==pstructcpy || NULL==pu8cpy_value)
 a5a:	00 97       	sbiw	r24, 0x00	; 0
 a5c:	09 f4       	brne	.+2      	; 0xa60 <keypadgetnumber+0x28>
 a5e:	74 c0       	rjmp	.+232    	; 0xb48 <keypadgetnumber+0x110>
 a60:	61 15       	cp	r22, r1
 a62:	71 05       	cpc	r23, r1
 a64:	09 f4       	brne	.+2      	; 0xa68 <keypadgetnumber+0x30>
 a66:	72 c0       	rjmp	.+228    	; 0xb4c <keypadgetnumber+0x114>
	{
		error=LSTY_NULL_POINTER;
	}
	else
	{
				u8 row,colum,x=1;
 a68:	21 e0       	ldi	r18, 0x01	; 1
 a6a:	29 83       	std	Y+1, r18	; 0x01

				if(pu8cpy_value == NULL)
 a6c:	61 15       	cp	r22, r1
 a6e:	71 05       	cpc	r23, r1
 a70:	09 f4       	brne	.+2      	; 0xa74 <keypadgetnumber+0x3c>
 a72:	68 c0       	rjmp	.+208    	; 0xb44 <keypadgetnumber+0x10c>
 a74:	4b 01       	movw	r8, r22
 a76:	8c 01       	movw	r16, r24
 a78:	61 2c       	mov	r6, r1
 a7a:	5e c0       	rjmp	.+188    	; 0xb38 <keypadgetnumber+0x100>
				else
				{
					for(colum=0;colum<NUM_OF_COLUMS_KEYPAD;colum++)
					{
						
						pstructcpy->colums[colum].enumoutputlevel=MDIO_LOW;
 a7c:	c6 2c       	mov	r12, r6
 a7e:	d1 2c       	mov	r13, r1
 a80:	f6 01       	movw	r30, r12
 a82:	ee 0f       	add	r30, r30
 a84:	ff 1f       	adc	r31, r31
 a86:	ee 0f       	add	r30, r30
 a88:	ff 1f       	adc	r31, r31
 a8a:	e0 0f       	add	r30, r16
 a8c:	f1 1f       	adc	r31, r17
 a8e:	13 8a       	std	Z+19, r1	; 0x13
						pin_value(&pstructcpy->colums[colum]);
 a90:	56 01       	movw	r10, r12
 a92:	84 e0       	ldi	r24, 0x04	; 4
 a94:	a8 0e       	add	r10, r24
 a96:	b1 1c       	adc	r11, r1
 a98:	aa 0c       	add	r10, r10
 a9a:	bb 1c       	adc	r11, r11
 a9c:	aa 0c       	add	r10, r10
 a9e:	bb 1c       	adc	r11, r11
 aa0:	a0 0e       	add	r10, r16
 aa2:	b1 1e       	adc	r11, r17
 aa4:	c5 01       	movw	r24, r10
 aa6:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
						for (row=0;row<NUM_OF_ROWS_KEYPAD;row++)
 aaa:	71 2c       	mov	r7, r1
 aac:	35 c0       	rjmp	.+106    	; 0xb18 <keypadgetnumber+0xe0>
						{
							pin_get_value(&HKEYPAD_arrayofkeypads->rows[row],&x);
 aae:	87 2d       	mov	r24, r7
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	88 0f       	add	r24, r24
 ab4:	99 1f       	adc	r25, r25
 ab6:	88 0f       	add	r24, r24
 ab8:	99 1f       	adc	r25, r25
 aba:	be 01       	movw	r22, r28
 abc:	6f 5f       	subi	r22, 0xFF	; 255
 abe:	7f 4f       	sbci	r23, 0xFF	; 255
 ac0:	89 56       	subi	r24, 0x69	; 105
 ac2:	9f 4f       	sbci	r25, 0xFF	; 255
 ac4:	0e 94 34 07 	call	0xe68	; 0xe68 <pin_get_value>
							if (x == MDIO_LOW)
 ac8:	89 81       	ldd	r24, Y+1	; 0x01
 aca:	81 11       	cpse	r24, r1
 acc:	24 c0       	rjmp	.+72     	; 0xb16 <keypadgetnumber+0xde>
							{
								*pu8cpy_value =keypad[row][colum];
 ace:	e7 2c       	mov	r14, r7
 ad0:	f1 2c       	mov	r15, r1
 ad2:	f7 01       	movw	r30, r14
 ad4:	ee 0f       	add	r30, r30
 ad6:	ff 1f       	adc	r31, r31
 ad8:	ee 0f       	add	r30, r30
 ada:	ff 1f       	adc	r31, r31
 adc:	e9 54       	subi	r30, 0x49	; 73
 ade:	ff 4f       	sbci	r31, 0xFF	; 255
 ae0:	ec 0d       	add	r30, r12
 ae2:	fd 1d       	adc	r31, r13
 ae4:	80 81       	ld	r24, Z
 ae6:	f4 01       	movw	r30, r8
 ae8:	80 83       	st	Z, r24
								while(!(x)) //while pressed
 aea:	0c c0       	rjmp	.+24     	; 0xb04 <keypadgetnumber+0xcc>
								{
									pin_get_value(&pstructcpy->rows[row], &x);
 aec:	be 01       	movw	r22, r28
 aee:	6f 5f       	subi	r22, 0xFF	; 255
 af0:	7f 4f       	sbci	r23, 0xFF	; 255
 af2:	c7 01       	movw	r24, r14
 af4:	88 0f       	add	r24, r24
 af6:	99 1f       	adc	r25, r25
 af8:	88 0f       	add	r24, r24
 afa:	99 1f       	adc	r25, r25
 afc:	80 0f       	add	r24, r16
 afe:	91 1f       	adc	r25, r17
 b00:	0e 94 34 07 	call	0xe68	; 0xe68 <pin_get_value>
						{
							pin_get_value(&HKEYPAD_arrayofkeypads->rows[row],&x);
							if (x == MDIO_LOW)
							{
								*pu8cpy_value =keypad[row][colum];
								while(!(x)) //while pressed
 b04:	89 81       	ldd	r24, Y+1	; 0x01
 b06:	88 23       	and	r24, r24
 b08:	89 f3       	breq	.-30     	; 0xaec <keypadgetnumber+0xb4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b0a:	8f e5       	ldi	r24, 0x5F	; 95
 b0c:	9a ee       	ldi	r25, 0xEA	; 234
 b0e:	01 97       	sbiw	r24, 0x01	; 1
 b10:	f1 f7       	brne	.-4      	; 0xb0e <keypadgetnumber+0xd6>
 b12:	00 c0       	rjmp	.+0      	; 0xb14 <keypadgetnumber+0xdc>
 b14:	00 00       	nop
					for(colum=0;colum<NUM_OF_COLUMS_KEYPAD;colum++)
					{
						
						pstructcpy->colums[colum].enumoutputlevel=MDIO_LOW;
						pin_value(&pstructcpy->colums[colum]);
						for (row=0;row<NUM_OF_ROWS_KEYPAD;row++)
 b16:	73 94       	inc	r7
 b18:	93 e0       	ldi	r25, 0x03	; 3
 b1a:	97 15       	cp	r25, r7
 b1c:	40 f6       	brcc	.-112    	; 0xaae <keypadgetnumber+0x76>
									pin_get_value(&pstructcpy->rows[row], &x);
								}
								_delay_ms(15); //debouncing
							}
						}
						pstructcpy->colums[colum].enumoutputlevel=MDIO_HIGH;
 b1e:	cc 0c       	add	r12, r12
 b20:	dd 1c       	adc	r13, r13
 b22:	cc 0c       	add	r12, r12
 b24:	dd 1c       	adc	r13, r13
 b26:	f8 01       	movw	r30, r16
 b28:	ec 0d       	add	r30, r12
 b2a:	fd 1d       	adc	r31, r13
 b2c:	81 e0       	ldi	r24, 0x01	; 1
 b2e:	83 8b       	std	Z+19, r24	; 0x13
						pin_value(&pstructcpy->colums[colum]);
 b30:	c5 01       	movw	r24, r10
 b32:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
					return LSTY_NULL_POINTER;
				}
				
				else
				{
					for(colum=0;colum<NUM_OF_COLUMS_KEYPAD;colum++)
 b36:	63 94       	inc	r6
 b38:	e3 e0       	ldi	r30, 0x03	; 3
 b3a:	e6 15       	cp	r30, r6
 b3c:	08 f0       	brcs	.+2      	; 0xb40 <keypadgetnumber+0x108>
 b3e:	9e cf       	rjmp	.-196    	; 0xa7c <keypadgetnumber+0x44>
						}
						pstructcpy->colums[colum].enumoutputlevel=MDIO_HIGH;
						pin_value(&pstructcpy->colums[colum]);
					}
					
					return LSTY_EXECUTED_SUCCESSFULLY;
 b40:	80 e0       	ldi	r24, 0x00	; 0
 b42:	05 c0       	rjmp	.+10     	; 0xb4e <keypadgetnumber+0x116>
	{
				u8 row,colum,x=1;

				if(pu8cpy_value == NULL)
				{
					return LSTY_NULL_POINTER;
 b44:	82 e0       	ldi	r24, 0x02	; 2
 b46:	03 c0       	rjmp	.+6      	; 0xb4e <keypadgetnumber+0x116>
					
					return LSTY_EXECUTED_SUCCESSFULLY;
				}

	}
	return error;
 b48:	82 e0       	ldi	r24, 0x02	; 2
 b4a:	01 c0       	rjmp	.+2      	; 0xb4e <keypadgetnumber+0x116>
 b4c:	82 e0       	ldi	r24, 0x02	; 2

}
 b4e:	0f 90       	pop	r0
 b50:	df 91       	pop	r29
 b52:	cf 91       	pop	r28
 b54:	1f 91       	pop	r17
 b56:	0f 91       	pop	r16
 b58:	ff 90       	pop	r15
 b5a:	ef 90       	pop	r14
 b5c:	df 90       	pop	r13
 b5e:	cf 90       	pop	r12
 b60:	bf 90       	pop	r11
 b62:	af 90       	pop	r10
 b64:	9f 90       	pop	r9
 b66:	8f 90       	pop	r8
 b68:	7f 90       	pop	r7
 b6a:	6f 90       	pop	r6
 b6c:	08 95       	ret

Disassembly of section .text.lcd_write_data:

00000678 <lcd_write_data>:
		break;
	}
	
}	
	return	error;
}
 678:	6f 92       	push	r6
 67a:	7f 92       	push	r7
 67c:	8f 92       	push	r8
 67e:	9f 92       	push	r9
 680:	af 92       	push	r10
 682:	bf 92       	push	r11
 684:	cf 92       	push	r12
 686:	df 92       	push	r13
 688:	ef 92       	push	r14
 68a:	ff 92       	push	r15
 68c:	0f 93       	push	r16
 68e:	1f 93       	push	r17
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	82 30       	cpi	r24, 0x02	; 2
 696:	08 f0       	brcs	.+2      	; 0x69a <lcd_write_data+0x22>
 698:	02 c1       	rjmp	.+516    	; 0x89e <__stack+0x3f>
 69a:	41 11       	cpse	r20, r1
 69c:	fe c0       	rjmp	.+508    	; 0x89a <__stack+0x3b>
 69e:	81 11       	cpse	r24, r1
 6a0:	08 c0       	rjmp	.+16     	; 0x6b2 <lcd_write_data+0x3a>
 6a2:	8d e2       	ldi	r24, 0x2D	; 45
 6a4:	48 9f       	mul	r20, r24
 6a6:	f0 01       	movw	r30, r0
 6a8:	11 24       	eor	r1, r1
 6aa:	e6 59       	subi	r30, 0x96	; 150
 6ac:	ff 4f       	sbci	r31, 0xFF	; 255
 6ae:	13 a2       	std	Z+35, r1	; 0x23
 6b0:	09 c0       	rjmp	.+18     	; 0x6c4 <lcd_write_data+0x4c>
 6b2:	81 30       	cpi	r24, 0x01	; 1
 6b4:	39 f4       	brne	.+14     	; 0x6c4 <lcd_write_data+0x4c>
 6b6:	9d e2       	ldi	r25, 0x2D	; 45
 6b8:	49 9f       	mul	r20, r25
 6ba:	f0 01       	movw	r30, r0
 6bc:	11 24       	eor	r1, r1
 6be:	e6 59       	subi	r30, 0x96	; 150
 6c0:	ff 4f       	sbci	r31, 0xFF	; 255
 6c2:	83 a3       	std	Z+35, r24	; 0x23
 6c4:	76 2e       	mov	r7, r22
 6c6:	c4 2f       	mov	r28, r20
 6c8:	d0 e0       	ldi	r29, 0x00	; 0
 6ca:	8d e2       	ldi	r24, 0x2D	; 45
 6cc:	8c 9f       	mul	r24, r28
 6ce:	80 01       	movw	r16, r0
 6d0:	8d 9f       	mul	r24, r29
 6d2:	10 0d       	add	r17, r0
 6d4:	11 24       	eor	r1, r1
 6d6:	f8 01       	movw	r30, r16
 6d8:	e6 59       	subi	r30, 0x96	; 150
 6da:	ff 4f       	sbci	r31, 0xFF	; 255
 6dc:	7f 01       	movw	r14, r30
 6de:	17 a2       	std	Z+39, r1	; 0x27
 6e0:	c8 01       	movw	r24, r16
 6e2:	86 57       	subi	r24, 0x76	; 118
 6e4:	9f 4f       	sbci	r25, 0xFF	; 255
 6e6:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 6ea:	c8 01       	movw	r24, r16
 6ec:	82 57       	subi	r24, 0x72	; 114
 6ee:	9f 4f       	sbci	r25, 0xFF	; 255
 6f0:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 6f4:	f7 01       	movw	r30, r14
 6f6:	84 a5       	ldd	r24, Z+44	; 0x2c
 6f8:	81 11       	cpse	r24, r1
 6fa:	6d c0       	rjmp	.+218    	; 0x7d6 <lcd_write_data+0x15e>
 6fc:	87 2d       	mov	r24, r7
 6fe:	80 7f       	andi	r24, 0xF0	; 240
 700:	84 fb       	bst	r24, 4
 702:	99 27       	eor	r25, r25
 704:	90 f9       	bld	r25, 0
 706:	e7 01       	movw	r28, r14
 708:	93 8b       	std	Z+19, r25	; 0x13
 70a:	85 fb       	bst	r24, 5
 70c:	99 27       	eor	r25, r25
 70e:	90 f9       	bld	r25, 0
 710:	97 8b       	std	Z+23, r25	; 0x17
 712:	86 fb       	bst	r24, 6
 714:	99 27       	eor	r25, r25
 716:	90 f9       	bld	r25, 0
 718:	93 8f       	std	Z+27, r25	; 0x1b
 71a:	87 fb       	bst	r24, 7
 71c:	88 27       	eor	r24, r24
 71e:	80 f9       	bld	r24, 0
 720:	87 8f       	std	Z+31, r24	; 0x1f
 722:	c8 01       	movw	r24, r16
 724:	86 58       	subi	r24, 0x86	; 134
 726:	9f 4f       	sbci	r25, 0xFF	; 255
 728:	5c 01       	movw	r10, r24
 72a:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 72e:	f8 01       	movw	r30, r16
 730:	e2 58       	subi	r30, 0x82	; 130
 732:	ff 4f       	sbci	r31, 0xFF	; 255
 734:	6f 01       	movw	r12, r30
 736:	cf 01       	movw	r24, r30
 738:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 73c:	c8 01       	movw	r24, r16
 73e:	8e 57       	subi	r24, 0x7E	; 126
 740:	9f 4f       	sbci	r25, 0xFF	; 255
 742:	7c 01       	movw	r14, r24
 744:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 748:	f8 01       	movw	r30, r16
 74a:	ea 57       	subi	r30, 0x7A	; 122
 74c:	ff 4f       	sbci	r31, 0xFF	; 255
 74e:	4f 01       	movw	r8, r30
 750:	cf 01       	movw	r24, r30
 752:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 756:	66 24       	eor	r6, r6
 758:	63 94       	inc	r6
 75a:	6b a6       	std	Y+43, r6	; 0x2b
 75c:	0e 56       	subi	r16, 0x6E	; 110
 75e:	1f 4f       	sbci	r17, 0xFF	; 255
 760:	c8 01       	movw	r24, r16
 762:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 766:	8f e3       	ldi	r24, 0x3F	; 63
 768:	9c e9       	ldi	r25, 0x9C	; 156
 76a:	01 97       	sbiw	r24, 0x01	; 1
 76c:	f1 f7       	brne	.-4      	; 0x76a <lcd_write_data+0xf2>
 76e:	00 c0       	rjmp	.+0      	; 0x770 <lcd_write_data+0xf8>
 770:	00 00       	nop
 772:	1b a6       	std	Y+43, r1	; 0x2b
 774:	c8 01       	movw	r24, r16
 776:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 77a:	67 2d       	mov	r22, r7
 77c:	62 95       	swap	r22
 77e:	60 7f       	andi	r22, 0xF0	; 240
 780:	64 fb       	bst	r22, 4
 782:	88 27       	eor	r24, r24
 784:	80 f9       	bld	r24, 0
 786:	8b 8b       	std	Y+19, r24	; 0x13
 788:	65 fb       	bst	r22, 5
 78a:	88 27       	eor	r24, r24
 78c:	80 f9       	bld	r24, 0
 78e:	8f 8b       	std	Y+23, r24	; 0x17
 790:	66 fb       	bst	r22, 6
 792:	88 27       	eor	r24, r24
 794:	80 f9       	bld	r24, 0
 796:	8b 8f       	std	Y+27, r24	; 0x1b
 798:	67 fb       	bst	r22, 7
 79a:	66 27       	eor	r22, r22
 79c:	60 f9       	bld	r22, 0
 79e:	6f 8f       	std	Y+31, r22	; 0x1f
 7a0:	c5 01       	movw	r24, r10
 7a2:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 7a6:	c6 01       	movw	r24, r12
 7a8:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 7ac:	c7 01       	movw	r24, r14
 7ae:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 7b2:	c4 01       	movw	r24, r8
 7b4:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 7b8:	6b a6       	std	Y+43, r6	; 0x2b
 7ba:	c8 01       	movw	r24, r16
 7bc:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 7c0:	ef e3       	ldi	r30, 0x3F	; 63
 7c2:	fc e9       	ldi	r31, 0x9C	; 156
 7c4:	31 97       	sbiw	r30, 0x01	; 1
 7c6:	f1 f7       	brne	.-4      	; 0x7c4 <lcd_write_data+0x14c>
 7c8:	00 c0       	rjmp	.+0      	; 0x7ca <lcd_write_data+0x152>
 7ca:	00 00       	nop
 7cc:	1b a6       	std	Y+43, r1	; 0x2b
 7ce:	c8 01       	movw	r24, r16
 7d0:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 7d4:	62 c0       	rjmp	.+196    	; 0x89a <__stack+0x3b>
 7d6:	81 30       	cpi	r24, 0x01	; 1
 7d8:	09 f0       	breq	.+2      	; 0x7dc <lcd_write_data+0x164>
 7da:	5f c0       	rjmp	.+190    	; 0x89a <__stack+0x3b>
 7dc:	87 2d       	mov	r24, r7
 7de:	81 70       	andi	r24, 0x01	; 1
 7e0:	9d e2       	ldi	r25, 0x2D	; 45
 7e2:	9c 9f       	mul	r25, r28
 7e4:	80 01       	movw	r16, r0
 7e6:	9d 9f       	mul	r25, r29
 7e8:	10 0d       	add	r17, r0
 7ea:	11 24       	eor	r1, r1
 7ec:	e8 01       	movw	r28, r16
 7ee:	c6 59       	subi	r28, 0x96	; 150
 7f0:	df 4f       	sbci	r29, 0xFF	; 255
 7f2:	8b 83       	std	Y+3, r24	; 0x03
 7f4:	71 fa       	bst	r7, 1
 7f6:	88 27       	eor	r24, r24
 7f8:	80 f9       	bld	r24, 0
 7fa:	8f 83       	std	Y+7, r24	; 0x07
 7fc:	72 fa       	bst	r7, 2
 7fe:	88 27       	eor	r24, r24
 800:	80 f9       	bld	r24, 0
 802:	8b 87       	std	Y+11, r24	; 0x0b
 804:	73 fa       	bst	r7, 3
 806:	88 27       	eor	r24, r24
 808:	80 f9       	bld	r24, 0
 80a:	8f 87       	std	Y+15, r24	; 0x0f
 80c:	74 fa       	bst	r7, 4
 80e:	88 27       	eor	r24, r24
 810:	80 f9       	bld	r24, 0
 812:	8b 8b       	std	Y+19, r24	; 0x13
 814:	75 fa       	bst	r7, 5
 816:	88 27       	eor	r24, r24
 818:	80 f9       	bld	r24, 0
 81a:	8f 8b       	std	Y+23, r24	; 0x17
 81c:	76 fa       	bst	r7, 6
 81e:	88 27       	eor	r24, r24
 820:	80 f9       	bld	r24, 0
 822:	8b 8f       	std	Y+27, r24	; 0x1b
 824:	77 fa       	bst	r7, 7
 826:	66 27       	eor	r22, r22
 828:	60 f9       	bld	r22, 0
 82a:	6f 8f       	std	Y+31, r22	; 0x1f
 82c:	ce 01       	movw	r24, r28
 82e:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 832:	c8 01       	movw	r24, r16
 834:	82 59       	subi	r24, 0x92	; 146
 836:	9f 4f       	sbci	r25, 0xFF	; 255
 838:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 83c:	c8 01       	movw	r24, r16
 83e:	8e 58       	subi	r24, 0x8E	; 142
 840:	9f 4f       	sbci	r25, 0xFF	; 255
 842:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 846:	c8 01       	movw	r24, r16
 848:	8a 58       	subi	r24, 0x8A	; 138
 84a:	9f 4f       	sbci	r25, 0xFF	; 255
 84c:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 850:	c8 01       	movw	r24, r16
 852:	86 58       	subi	r24, 0x86	; 134
 854:	9f 4f       	sbci	r25, 0xFF	; 255
 856:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 85a:	c8 01       	movw	r24, r16
 85c:	82 58       	subi	r24, 0x82	; 130
 85e:	9f 4f       	sbci	r25, 0xFF	; 255
 860:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 864:	c8 01       	movw	r24, r16
 866:	8e 57       	subi	r24, 0x7E	; 126
 868:	9f 4f       	sbci	r25, 0xFF	; 255
 86a:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 86e:	c8 01       	movw	r24, r16
 870:	8a 57       	subi	r24, 0x7A	; 122
 872:	9f 4f       	sbci	r25, 0xFF	; 255
 874:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	8b a7       	std	Y+43, r24	; 0x2b
 87c:	0e 56       	subi	r16, 0x6E	; 110
 87e:	1f 4f       	sbci	r17, 0xFF	; 255
 880:	c8 01       	movw	r24, r16
 882:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 886:	8f e3       	ldi	r24, 0x3F	; 63
 888:	9c e9       	ldi	r25, 0x9C	; 156
 88a:	01 97       	sbiw	r24, 0x01	; 1
 88c:	f1 f7       	brne	.-4      	; 0x88a <__stack+0x2b>
 88e:	00 c0       	rjmp	.+0      	; 0x890 <__stack+0x31>
 890:	00 00       	nop
 892:	1b a6       	std	Y+43, r1	; 0x2b
 894:	c8 01       	movw	r24, r16
 896:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
 89a:	80 e0       	ldi	r24, 0x00	; 0
 89c:	01 c0       	rjmp	.+2      	; 0x8a0 <__stack+0x41>
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	df 91       	pop	r29
 8a2:	cf 91       	pop	r28
 8a4:	1f 91       	pop	r17
 8a6:	0f 91       	pop	r16
 8a8:	ff 90       	pop	r15
 8aa:	ef 90       	pop	r14
 8ac:	df 90       	pop	r13
 8ae:	cf 90       	pop	r12
 8b0:	bf 90       	pop	r11
 8b2:	af 90       	pop	r10
 8b4:	9f 90       	pop	r9
 8b6:	8f 90       	pop	r8
 8b8:	7f 90       	pop	r7
 8ba:	6f 90       	pop	r6
 8bc:	08 95       	ret

Disassembly of section .text.lcd_init:

000008be <lcd_init>:
 8be:	ef 92       	push	r14
 8c0:	ff 92       	push	r15
 8c2:	0f 93       	push	r16
 8c4:	1f 93       	push	r17
 8c6:	cf 93       	push	r28
 8c8:	c0 e0       	ldi	r28, 0x00	; 0
 8ca:	ac c0       	rjmp	.+344    	; 0xa24 <lcd_init+0x166>
 8cc:	ec 2e       	mov	r14, r28
 8ce:	f1 2c       	mov	r15, r1
 8d0:	8d e2       	ldi	r24, 0x2D	; 45
 8d2:	8e 9d       	mul	r24, r14
 8d4:	80 01       	movw	r16, r0
 8d6:	8f 9d       	mul	r24, r15
 8d8:	10 0d       	add	r17, r0
 8da:	11 24       	eor	r1, r1
 8dc:	c8 01       	movw	r24, r16
 8de:	86 57       	subi	r24, 0x76	; 118
 8e0:	9f 4f       	sbci	r25, 0xFF	; 255
 8e2:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
 8e6:	c8 01       	movw	r24, r16
 8e8:	82 57       	subi	r24, 0x72	; 114
 8ea:	9f 4f       	sbci	r25, 0xFF	; 255
 8ec:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
 8f0:	c8 01       	movw	r24, r16
 8f2:	8e 56       	subi	r24, 0x6E	; 110
 8f4:	9f 4f       	sbci	r25, 0xFF	; 255
 8f6:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
 8fa:	f8 01       	movw	r30, r16
 8fc:	e6 59       	subi	r30, 0x96	; 150
 8fe:	ff 4f       	sbci	r31, 0xFF	; 255
 900:	84 a5       	ldd	r24, Z+44	; 0x2c
 902:	81 30       	cpi	r24, 0x01	; 1
 904:	39 f5       	brne	.+78     	; 0x954 <lcd_init+0x96>
 906:	cf 01       	movw	r24, r30
 908:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
 90c:	c8 01       	movw	r24, r16
 90e:	82 59       	subi	r24, 0x92	; 146
 910:	9f 4f       	sbci	r25, 0xFF	; 255
 912:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
 916:	c8 01       	movw	r24, r16
 918:	8e 58       	subi	r24, 0x8E	; 142
 91a:	9f 4f       	sbci	r25, 0xFF	; 255
 91c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
 920:	c8 01       	movw	r24, r16
 922:	8a 58       	subi	r24, 0x8A	; 138
 924:	9f 4f       	sbci	r25, 0xFF	; 255
 926:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
 92a:	c8 01       	movw	r24, r16
 92c:	86 58       	subi	r24, 0x86	; 134
 92e:	9f 4f       	sbci	r25, 0xFF	; 255
 930:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
 934:	c8 01       	movw	r24, r16
 936:	82 58       	subi	r24, 0x82	; 130
 938:	9f 4f       	sbci	r25, 0xFF	; 255
 93a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
 93e:	c8 01       	movw	r24, r16
 940:	8e 57       	subi	r24, 0x7E	; 126
 942:	9f 4f       	sbci	r25, 0xFF	; 255
 944:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
 948:	c8 01       	movw	r24, r16
 94a:	8a 57       	subi	r24, 0x7A	; 122
 94c:	9f 4f       	sbci	r25, 0xFF	; 255
 94e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
 952:	1c c0       	rjmp	.+56     	; 0x98c <lcd_init+0xce>
 954:	81 11       	cpse	r24, r1
 956:	1a c0       	rjmp	.+52     	; 0x98c <lcd_init+0xce>
 958:	8d e2       	ldi	r24, 0x2D	; 45
 95a:	8e 9d       	mul	r24, r14
 95c:	80 01       	movw	r16, r0
 95e:	8f 9d       	mul	r24, r15
 960:	10 0d       	add	r17, r0
 962:	11 24       	eor	r1, r1
 964:	c8 01       	movw	r24, r16
 966:	86 58       	subi	r24, 0x86	; 134
 968:	9f 4f       	sbci	r25, 0xFF	; 255
 96a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
 96e:	c8 01       	movw	r24, r16
 970:	82 58       	subi	r24, 0x82	; 130
 972:	9f 4f       	sbci	r25, 0xFF	; 255
 974:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
 978:	c8 01       	movw	r24, r16
 97a:	8e 57       	subi	r24, 0x7E	; 126
 97c:	9f 4f       	sbci	r25, 0xFF	; 255
 97e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
 982:	c8 01       	movw	r24, r16
 984:	8a 57       	subi	r24, 0x7A	; 122
 986:	9f 4f       	sbci	r25, 0xFF	; 255
 988:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
 98c:	2f ef       	ldi	r18, 0xFF	; 255
 98e:	86 e7       	ldi	r24, 0x76	; 118
 990:	91 e0       	ldi	r25, 0x01	; 1
 992:	21 50       	subi	r18, 0x01	; 1
 994:	80 40       	sbci	r24, 0x00	; 0
 996:	90 40       	sbci	r25, 0x00	; 0
 998:	e1 f7       	brne	.-8      	; 0x992 <lcd_init+0xd4>
 99a:	00 c0       	rjmp	.+0      	; 0x99c <lcd_init+0xde>
 99c:	00 00       	nop
 99e:	8d e2       	ldi	r24, 0x2D	; 45
 9a0:	8e 9d       	mul	r24, r14
 9a2:	f0 01       	movw	r30, r0
 9a4:	8f 9d       	mul	r24, r15
 9a6:	f0 0d       	add	r31, r0
 9a8:	11 24       	eor	r1, r1
 9aa:	e6 59       	subi	r30, 0x96	; 150
 9ac:	ff 4f       	sbci	r31, 0xFF	; 255
 9ae:	84 a5       	ldd	r24, Z+44	; 0x2c
 9b0:	81 30       	cpi	r24, 0x01	; 1
 9b2:	31 f4       	brne	.+12     	; 0x9c0 <lcd_init+0x102>
 9b4:	4c 2f       	mov	r20, r28
 9b6:	68 e3       	ldi	r22, 0x38	; 56
 9b8:	80 e0       	ldi	r24, 0x00	; 0
 9ba:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
 9be:	10 c0       	rjmp	.+32     	; 0x9e0 <lcd_init+0x122>
 9c0:	81 11       	cpse	r24, r1
 9c2:	0e c0       	rjmp	.+28     	; 0x9e0 <lcd_init+0x122>
 9c4:	4c 2f       	mov	r20, r28
 9c6:	63 e3       	ldi	r22, 0x33	; 51
 9c8:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
 9cc:	4c 2f       	mov	r20, r28
 9ce:	62 e3       	ldi	r22, 0x32	; 50
 9d0:	80 e0       	ldi	r24, 0x00	; 0
 9d2:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
 9d6:	4c 2f       	mov	r20, r28
 9d8:	68 e2       	ldi	r22, 0x28	; 40
 9da:	80 e0       	ldi	r24, 0x00	; 0
 9dc:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
 9e0:	8f e9       	ldi	r24, 0x9F	; 159
 9e2:	9f e0       	ldi	r25, 0x0F	; 15
 9e4:	01 97       	sbiw	r24, 0x01	; 1
 9e6:	f1 f7       	brne	.-4      	; 0x9e4 <lcd_init+0x126>
 9e8:	00 c0       	rjmp	.+0      	; 0x9ea <lcd_init+0x12c>
 9ea:	00 00       	nop
 9ec:	4c 2f       	mov	r20, r28
 9ee:	6f e0       	ldi	r22, 0x0F	; 15
 9f0:	80 e0       	ldi	r24, 0x00	; 0
 9f2:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
 9f6:	8f e9       	ldi	r24, 0x9F	; 159
 9f8:	9f e0       	ldi	r25, 0x0F	; 15
 9fa:	01 97       	sbiw	r24, 0x01	; 1
 9fc:	f1 f7       	brne	.-4      	; 0x9fa <lcd_init+0x13c>
 9fe:	00 c0       	rjmp	.+0      	; 0xa00 <lcd_init+0x142>
 a00:	00 00       	nop
 a02:	4c 2f       	mov	r20, r28
 a04:	61 e0       	ldi	r22, 0x01	; 1
 a06:	80 e0       	ldi	r24, 0x00	; 0
 a08:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
 a0c:	8f e9       	ldi	r24, 0x9F	; 159
 a0e:	9f e0       	ldi	r25, 0x0F	; 15
 a10:	01 97       	sbiw	r24, 0x01	; 1
 a12:	f1 f7       	brne	.-4      	; 0xa10 <lcd_init+0x152>
 a14:	00 c0       	rjmp	.+0      	; 0xa16 <lcd_init+0x158>
 a16:	00 00       	nop
 a18:	4c 2f       	mov	r20, r28
 a1a:	66 e0       	ldi	r22, 0x06	; 6
 a1c:	80 e0       	ldi	r24, 0x00	; 0
 a1e:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
 a22:	cf 5f       	subi	r28, 0xFF	; 255
 a24:	cc 23       	and	r28, r28
 a26:	09 f4       	brne	.+2      	; 0xa2a <lcd_init+0x16c>
 a28:	51 cf       	rjmp	.-350    	; 0x8cc <lcd_init+0xe>
 a2a:	80 e0       	ldi	r24, 0x00	; 0
 a2c:	cf 91       	pop	r28
 a2e:	1f 91       	pop	r17
 a30:	0f 91       	pop	r16
 a32:	ff 90       	pop	r15
 a34:	ef 90       	pop	r14
 a36:	08 95       	ret

Disassembly of section .text.LCDstring:

00001156 <LCDstring>:
    1156:	ef 92       	push	r14
    1158:	ff 92       	push	r15
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	7c 01       	movw	r14, r24
    1164:	d6 2f       	mov	r29, r22
    1166:	14 2f       	mov	r17, r20
    1168:	c0 e0       	ldi	r28, 0x00	; 0
    116a:	00 e0       	ldi	r16, 0x00	; 0
    116c:	13 c0       	rjmp	.+38     	; 0x1194 <LCDstring+0x3e>
    116e:	cf 30       	cpi	r28, 0x0F	; 15
    1170:	41 f4       	brne	.+16     	; 0x1182 <LCDstring+0x2c>
    1172:	01 11       	cpse	r16, r1
    1174:	06 c0       	rjmp	.+12     	; 0x1182 <LCDstring+0x2c>
    1176:	41 2f       	mov	r20, r17
    1178:	60 ec       	ldi	r22, 0xC0	; 192
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
    1180:	01 e0       	ldi	r16, 0x01	; 1
    1182:	f7 01       	movw	r30, r14
    1184:	ec 0f       	add	r30, r28
    1186:	f1 1d       	adc	r31, r1
    1188:	41 2f       	mov	r20, r17
    118a:	60 81       	ld	r22, Z
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
    1192:	cf 5f       	subi	r28, 0xFF	; 255
    1194:	cd 17       	cp	r28, r29
    1196:	58 f3       	brcs	.-42     	; 0x116e <LCDstring+0x18>
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ff 90       	pop	r15
    11a4:	ef 90       	pop	r14
    11a6:	08 95       	ret

Disassembly of section .text.lcdclear:

00001414 <lcdclear>:


tenumFncErrorState lcdclear(void)
{
	tenumFncErrorState error=LSTY_EXECUTED_SUCCESSFULLY;
	lcd_write_data(COMMAND,CLEAR_DISPLAY,HLCD_NUM0);
    1414:	40 e0       	ldi	r20, 0x00	; 0
    1416:	61 e0       	ldi	r22, 0x01	; 1
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
	return error;
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	08 95       	ret

Disassembly of section .text.u8check_if_admin_set_pass:

000012d8 <u8check_if_admin_set_pass>:
}



u8 u8check_if_admin_set_pass()
{
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	0f 92       	push	r0
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
	u8 data=0,local_variable=0;
    12e2:	19 82       	std	Y+1, r1	; 0x01
	EEPROM_READ_BYTE_MEEPROM(3,&data);
    12e4:	be 01       	movw	r22, r28
    12e6:	6f 5f       	subi	r22, 0xFF	; 255
    12e8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 a9 09 	call	0x1352	; 0x1352 <EEPROM_READ_BYTE_MEEPROM>
	if (0xff==data)
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	8f 3f       	cpi	r24, 0xFF	; 255
    12f6:	59 f0       	breq	.+22     	; 0x130e <u8check_if_admin_set_pass+0x36>
		local_variable=0;	//admin has not set a pass
	}
	else
	{
		local_variable=1;	//admin had set pass before
		counter_in_eeprom=4;
    12f8:	84 e0       	ldi	r24, 0x04	; 4
    12fa:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <counter_in_eeprom>
		address_in_eeprom=4;
    12fe:	84 e0       	ldi	r24, 0x04	; 4
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <address_in_eeprom+0x1>
    1306:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <address_in_eeprom>
	{
		local_variable=0;	//admin has not set a pass
	}
	else
	{
		local_variable=1;	//admin had set pass before
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <u8check_if_admin_set_pass+0x38>
{
	u8 data=0,local_variable=0;
	EEPROM_READ_BYTE_MEEPROM(3,&data);
	if (0xff==data)
	{
		local_variable=0;	//admin has not set a pass
    130e:	80 e0       	ldi	r24, 0x00	; 0
		local_variable=1;	//admin had set pass before
		counter_in_eeprom=4;
		address_in_eeprom=4;
	}
	return local_variable;
}
    1310:	0f 90       	pop	r0
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	08 95       	ret

Disassembly of section .text.u8set_admin_pass:

00001020 <u8set_admin_pass>:


u8 u8set_admin_pass(void)
{
	u8 local_variable=0;
	LCDstring(set_admin_pass,sizeof(set_admin_pass),HLCD_NUM0);
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	60 e1       	ldi	r22, 0x10	; 16
    1024:	87 ec       	ldi	r24, 0xC7	; 199
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
	
	while (4!=counter_in_eeprom)
    102c:	27 c0       	rjmp	.+78     	; 0x107c <u8set_admin_pass+0x5c>
	{
			keypadgetnumber(&HKEYPAD_arrayofkeypads[0],&value_in_keypad);
    102e:	64 e4       	ldi	r22, 0x44	; 68
    1030:	71 e0       	ldi	r23, 0x01	; 1
    1032:	87 e9       	ldi	r24, 0x97	; 151
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 1c 05 	call	0xa38	; 0xa38 <keypadgetnumber>
			if (1!=value_in_keypad)
    103a:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <value_in_keypad>
    103e:	61 30       	cpi	r22, 0x01	; 1
    1040:	e9 f0       	breq	.+58     	; 0x107c <u8set_admin_pass+0x5c>
			{
				lcd_write_data(DATA,value_in_keypad,HLCD_NUM0);
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
				EEPROM_WRITE_BYTE(value_in_keypad,address_in_eeprom);
    104a:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <address_in_eeprom>
    104e:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <address_in_eeprom+0x1>
    1052:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <value_in_keypad>
    1056:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <EEPROM_WRITE_BYTE>
				address_in_eeprom++;
    105a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <address_in_eeprom>
    105e:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <address_in_eeprom+0x1>
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <address_in_eeprom+0x1>
    1068:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <address_in_eeprom>
				counter_in_eeprom++;
    106c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <counter_in_eeprom>
    1070:	8f 5f       	subi	r24, 0xFF	; 255
    1072:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <counter_in_eeprom>
				value_in_keypad=1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <value_in_keypad>
u8 u8set_admin_pass(void)
{
	u8 local_variable=0;
	LCDstring(set_admin_pass,sizeof(set_admin_pass),HLCD_NUM0);
	
	while (4!=counter_in_eeprom)
    107c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <counter_in_eeprom>
    1080:	84 30       	cpi	r24, 0x04	; 4
    1082:	a9 f6       	brne	.-86     	; 0x102e <u8set_admin_pass+0xe>
				counter_in_eeprom++;
				value_in_keypad=1;
			}
	}
	
	lcdclear();
    1084:	0e 94 0a 0a 	call	0x1414	; 0x1414 <lcdclear>
	local_variable=1;
	return local_variable;
}
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	08 95       	ret

Disassembly of section .text.u8enter_admin_pass:

0000108c <u8enter_admin_pass>:


u8 u8enter_admin_pass(void)
{
	u8 local_variable=1;
	LCDstring(enter_password_message,sizeof(enter_password_message)-1,HLCD_NUM0);
    108c:	40 e0       	ldi	r20, 0x00	; 0
    108e:	69 e0       	ldi	r22, 0x09	; 9
    1090:	8e ef       	ldi	r24, 0xFE	; 254
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
	while (8!=counter_in_eeprom)
    1098:	27 c0       	rjmp	.+78     	; 0x10e8 <u8enter_admin_pass+0x5c>
	{
			keypadgetnumber(&HKEYPAD_arrayofkeypads[0],&value_in_keypad);
    109a:	64 e4       	ldi	r22, 0x44	; 68
    109c:	71 e0       	ldi	r23, 0x01	; 1
    109e:	87 e9       	ldi	r24, 0x97	; 151
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 94 1c 05 	call	0xa38	; 0xa38 <keypadgetnumber>
			if (1!=value_in_keypad)
    10a6:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <value_in_keypad>
    10aa:	61 30       	cpi	r22, 0x01	; 1
    10ac:	e9 f0       	breq	.+58     	; 0x10e8 <u8enter_admin_pass+0x5c>
			{
				lcd_write_data(DATA,value_in_keypad,HLCD_NUM0);
    10ae:	40 e0       	ldi	r20, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
				EEPROM_WRITE_BYTE(value_in_keypad,address_in_eeprom);
    10b6:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <address_in_eeprom>
    10ba:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <address_in_eeprom+0x1>
    10be:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <value_in_keypad>
    10c2:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <EEPROM_WRITE_BYTE>
				address_in_eeprom++;
    10c6:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <address_in_eeprom>
    10ca:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <address_in_eeprom+0x1>
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <address_in_eeprom+0x1>
    10d4:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <address_in_eeprom>
				counter_in_eeprom++;
    10d8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <counter_in_eeprom>
    10dc:	8f 5f       	subi	r24, 0xFF	; 255
    10de:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <counter_in_eeprom>
				value_in_keypad=1;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <value_in_keypad>

u8 u8enter_admin_pass(void)
{
	u8 local_variable=1;
	LCDstring(enter_password_message,sizeof(enter_password_message)-1,HLCD_NUM0);
	while (8!=counter_in_eeprom)
    10e8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <counter_in_eeprom>
    10ec:	88 30       	cpi	r24, 0x08	; 8
    10ee:	a9 f6       	brne	.-86     	; 0x109a <u8enter_admin_pass+0xe>
				counter_in_eeprom++;
				value_in_keypad=1;
			}
	}
	
	lcdclear();
    10f0:	0e 94 0a 0a 	call	0x1414	; 0x1414 <lcdclear>
	local_variable=2;
	return local_variable;

}
    10f4:	82 e0       	ldi	r24, 0x02	; 2
    10f6:	08 95       	ret

Disassembly of section .text.u8check_admin_pass:

00000f12 <u8check_admin_pass>:


u8 u8check_admin_pass(void)	//return 3
{
 f12:	cf 93       	push	r28
 f14:	df 93       	push	r29
	u8 local_variable=2;
	while (no_of_trials>counter_for_wrong_pass_entered)
 f16:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <counter_for_wrong_pass_entered>
 f1a:	83 30       	cpi	r24, 0x03	; 3
 f1c:	30 f1       	brcs	.+76     	; 0xf6a <u8check_admin_pass+0x58>
}


u8 u8check_admin_pass(void)	//return 3
{
	u8 local_variable=2;
 f1e:	82 e0       	ldi	r24, 0x02	; 2
 f20:	42 c0       	rjmp	.+132    	; 0xfa6 <u8check_admin_pass+0x94>
	while (no_of_trials>counter_for_wrong_pass_entered)
	{
		for (int i=0;i<4;i++)
		{
			EEPROM_READ_BYTE_MEEPROM(i,&saved_pass);
 f22:	62 e4       	ldi	r22, 0x42	; 66
 f24:	71 e0       	ldi	r23, 0x01	; 1
 f26:	ce 01       	movw	r24, r28
 f28:	0e 94 a9 09 	call	0x1352	; 0x1352 <EEPROM_READ_BYTE_MEEPROM>
			EEPROM_READ_BYTE_MEEPROM(i+4,&entered_pass);
 f2c:	61 e4       	ldi	r22, 0x41	; 65
 f2e:	71 e0       	ldi	r23, 0x01	; 1
 f30:	ce 01       	movw	r24, r28
 f32:	04 96       	adiw	r24, 0x04	; 4
 f34:	0e 94 a9 09 	call	0x1352	; 0x1352 <EEPROM_READ_BYTE_MEEPROM>
			if (saved_pass!=entered_pass)
 f38:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <saved_pass>
 f3c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <entered_pass>
 f40:	98 17       	cp	r25, r24
 f42:	89 f0       	breq	.+34     	; 0xf66 <u8check_admin_pass+0x54>
			{
				wrong_pass_flag=1;
 f44:	81 e0       	ldi	r24, 0x01	; 1
 f46:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <wrong_pass_flag>
				counter_for_wrong_pass_entered++;
 f4a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <counter_for_wrong_pass_entered>
 f4e:	8f 5f       	subi	r24, 0xFF	; 255
 f50:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <counter_for_wrong_pass_entered>
				LCDstring(error_message,sizeof(error_message)-1,HLCD_NUM0);
 f54:	40 e0       	ldi	r20, 0x00	; 0
 f56:	6e e0       	ldi	r22, 0x0E	; 14
 f58:	87 ed       	ldi	r24, 0xD7	; 215
 f5a:	90 e0       	ldi	r25, 0x00	; 0
 f5c:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
				lcdclear();
 f60:	0e 94 0a 0a 	call	0x1414	; 0x1414 <lcdclear>
				break;
 f64:	07 c0       	rjmp	.+14     	; 0xf74 <u8check_admin_pass+0x62>
u8 u8check_admin_pass(void)	//return 3
{
	u8 local_variable=2;
	while (no_of_trials>counter_for_wrong_pass_entered)
	{
		for (int i=0;i<4;i++)
 f66:	21 96       	adiw	r28, 0x01	; 1
 f68:	02 c0       	rjmp	.+4      	; 0xf6e <u8check_admin_pass+0x5c>
 f6a:	c0 e0       	ldi	r28, 0x00	; 0
 f6c:	d0 e0       	ldi	r29, 0x00	; 0
 f6e:	c4 30       	cpi	r28, 0x04	; 4
 f70:	d1 05       	cpc	r29, r1
 f72:	bc f2       	brlt	.-82     	; 0xf22 <u8check_admin_pass+0x10>
				lcdclear();
				break;
			}
		}
		
		if (1!=wrong_pass_flag)		//right pass
 f74:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <wrong_pass_flag>
 f78:	81 30       	cpi	r24, 0x01	; 1
 f7a:	51 f0       	breq	.+20     	; 0xf90 <u8check_admin_pass+0x7e>
		{
			LCDstring(right_pass,sizeof(right_pass)-1,HLCD_NUM0);
 f7c:	40 e0       	ldi	r20, 0x00	; 0
 f7e:	67 e0       	ldi	r22, 0x07	; 7
 f80:	80 e1       	ldi	r24, 0x10	; 16
 f82:	91 e0       	ldi	r25, 0x01	; 1
 f84:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
			lcdclear();
 f88:	0e 94 0a 0a 	call	0x1414	; 0x1414 <lcdclear>
			local_variable=3;
 f8c:	83 e0       	ldi	r24, 0x03	; 3
			break;
 f8e:	0b c0       	rjmp	.+22     	; 0xfa6 <u8check_admin_pass+0x94>
		}
		else						//wrong pass
		{
			local_variable=1;
			address_in_eeprom=4;
 f90:	84 e0       	ldi	r24, 0x04	; 4
 f92:	90 e0       	ldi	r25, 0x00	; 0
 f94:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <address_in_eeprom+0x1>
 f98:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <address_in_eeprom>
			counter_in_eeprom=4;
 f9c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <counter_in_eeprom>
			wrong_pass_flag=0;
 fa0:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <wrong_pass_flag>
			local_variable=3;
			break;
		}
		else						//wrong pass
		{
			local_variable=1;
 fa4:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}

	}
	return local_variable;
}
 fa6:	df 91       	pop	r29
 fa8:	cf 91       	pop	r28
 faa:	08 95       	ret

Disassembly of section .text.u8admin_control:

000000e8 <u8admin_control>:


u8 u8admin_control(void)		//return 4
{
	u8 local_variable=3;
	while (3==local_variable)
  e8:	c1 c2       	rjmp	.+1410   	; 0x66c <__EEPROM_REGION_LENGTH__+0x26c>
	{
			if (0==lcd_flag)
			{
				LCDstring(choose,sizeof(choose)-1,HLCD_NUM0);
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	6c e0       	ldi	r22, 0x0C	; 12
  ee:	86 ee       	ldi	r24, 0xE6	; 230
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
				lcd_flag=1;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <lcd_flag>
			}
			keypadgetnumber(&HKEYPAD_arrayofkeypads[0],&value_in_keypad);
  fc:	64 e4       	ldi	r22, 0x44	; 68
  fe:	71 e0       	ldi	r23, 0x01	; 1
 100:	87 e9       	ldi	r24, 0x97	; 151
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 1c 05 	call	0xa38	; 0xa38 <keypadgetnumber>
			if (1!=value_in_keypad)
 108:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <value_in_keypad>
 10c:	61 30       	cpi	r22, 0x01	; 1
 10e:	09 f4       	brne	.+2      	; 0x112 <u8admin_control+0x2a>
 110:	ad c2       	rjmp	.+1370   	; 0x66c <__EEPROM_REGION_LENGTH__+0x26c>
			{
				lcd_write_data(DATA,value_in_keypad,HLCD_NUM0);
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
				spi_master_init();
 11a:	0e 94 d6 07 	call	0xfac	; 0xfac <spi_master_init>
				switch(value_in_keypad)
 11e:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <value_in_keypad>
 122:	8e 2f       	mov	r24, r30
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	f0 97       	sbiw	r30, 0x30	; 48
 12a:	e8 30       	cpi	r30, 0x08	; 8
 12c:	f1 05       	cpc	r31, r1
 12e:	08 f0       	brcs	.+2      	; 0x132 <u8admin_control+0x4a>
 130:	9a c2       	rjmp	.+1332   	; 0x666 <__EEPROM_REGION_LENGTH__+0x266>
 132:	e6 5d       	subi	r30, 0xD6	; 214
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__tablejump2__>
				{
					case '0':
					value_in_keypad=1;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <value_in_keypad>
					spi_master_transmit_byte(0);
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	0e 94 d7 09 	call	0x13ae	; 0x13ae <spi_master_transmit_byte>
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	81 ee       	ldi	r24, 0xE1	; 225
 14a:	94 e0       	ldi	r25, 0x04	; 4
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <u8admin_control+0x64>
 154:	00 c0       	rjmp	.+0      	; 0x156 <u8admin_control+0x6e>
 156:	00 00       	nop
					_delay_ms(100);
					spi_master_receive_byte(&(loads_status.state_of_led0));
 158:	80 e6       	ldi	r24, 0x60	; 96
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 8c 09 	call	0x1318	; 0x1318 <spi_master_receive_byte>
					lcdclear();
 160:	0e 94 0a 0a 	call	0x1414	; 0x1414 <lcdclear>
					LCDstring(status,sizeof(status)-1,HLCD_NUM0);
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	67 e0       	ldi	r22, 0x07	; 7
 168:	88 e0       	ldi	r24, 0x08	; 8
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					loads_status.state_of_led0 ?LCDstring(on,sizeof(on)-1,HLCD_NUM0) :
 170:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 174:	88 23       	and	r24, r24
 176:	39 f0       	breq	.+14     	; 0x186 <u8admin_control+0x9e>
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	62 e0       	ldi	r22, 0x02	; 2
 17c:	86 e3       	ldi	r24, 0x36	; 54
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
 184:	06 c0       	rjmp	.+12     	; 0x192 <u8admin_control+0xaa>
												LCDstring(off,sizeof(off)-1,HLCD_NUM0);
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	63 e0       	ldi	r22, 0x03	; 3
 18a:	8e e1       	ldi	r24, 0x1E	; 30
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					lcd_write_data(COMMAND,0xc0,HLCD_NUM0);
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	60 ec       	ldi	r22, 0xC0	; 192
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
					LCDstring(choose_op_level,sizeof(choose_op_level)-1,HLCD_NUM0);
 19c:	40 e0       	ldi	r20, 0x00	; 0
 19e:	6a e0       	ldi	r22, 0x0A	; 10
 1a0:	83 ef       	ldi	r24, 0xF3	; 243
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					while (value_in_keypad==1)
 1a8:	16 c0       	rjmp	.+44     	; 0x1d6 <u8admin_control+0xee>
					{
						keypadgetnumber(&HKEYPAD_arrayofkeypads[0],&value_in_keypad);
 1aa:	64 e4       	ldi	r22, 0x44	; 68
 1ac:	71 e0       	ldi	r23, 0x01	; 1
 1ae:	87 e9       	ldi	r24, 0x97	; 151
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 1c 05 	call	0xa38	; 0xa38 <keypadgetnumber>
						if (1!=value_in_keypad)
 1b6:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <value_in_keypad>
 1ba:	61 30       	cpi	r22, 0x01	; 1
 1bc:	61 f0       	breq	.+24     	; 0x1d6 <u8admin_control+0xee>
						{
							lcd_write_data(DATA,value_in_keypad,HLCD_NUM0);
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
							spi_master_transmit_byte(value_in_keypad);
 1c6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <value_in_keypad>
 1ca:	0e 94 d7 09 	call	0x13ae	; 0x13ae <spi_master_transmit_byte>
							lcdclear();
 1ce:	0e 94 0a 0a 	call	0x1414	; 0x1414 <lcdclear>
							lcd_flag=0;
 1d2:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <lcd_flag>
					LCDstring(status,sizeof(status)-1,HLCD_NUM0);
					loads_status.state_of_led0 ?LCDstring(on,sizeof(on)-1,HLCD_NUM0) :
												LCDstring(off,sizeof(off)-1,HLCD_NUM0);
					lcd_write_data(COMMAND,0xc0,HLCD_NUM0);
					LCDstring(choose_op_level,sizeof(choose_op_level)-1,HLCD_NUM0);
					while (value_in_keypad==1)
 1d6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <value_in_keypad>
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	31 f3       	breq	.-52     	; 0x1aa <u8admin_control+0xc2>
 1de:	43 c2       	rjmp	.+1158   	; 0x666 <__EEPROM_REGION_LENGTH__+0x266>
					}
					//local_variable=4;
					break	;
					
					case '1':
					value_in_keypad=1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <value_in_keypad>
					spi_master_transmit_byte(1);
 1e6:	0e 94 d7 09 	call	0x13ae	; 0x13ae <spi_master_transmit_byte>
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	81 ee       	ldi	r24, 0xE1	; 225
 1ee:	94 e0       	ldi	r25, 0x04	; 4
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <u8admin_control+0x108>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <u8admin_control+0x112>
 1fa:	00 00       	nop
					_delay_ms(100);
					spi_master_receive_byte(&(loads_status.state_of_led1));
 1fc:	81 e6       	ldi	r24, 0x61	; 97
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 8c 09 	call	0x1318	; 0x1318 <spi_master_receive_byte>
					lcdclear();
 204:	0e 94 0a 0a 	call	0x1414	; 0x1414 <lcdclear>
					LCDstring(status,sizeof(status)-1,HLCD_NUM0);
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	67 e0       	ldi	r22, 0x07	; 7
 20c:	88 e0       	ldi	r24, 0x08	; 8
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					loads_status.state_of_led1 ?LCDstring(on,sizeof(on)-1,HLCD_NUM0) :
 214:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 218:	88 23       	and	r24, r24
 21a:	39 f0       	breq	.+14     	; 0x22a <u8admin_control+0x142>
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	62 e0       	ldi	r22, 0x02	; 2
 220:	86 e3       	ldi	r24, 0x36	; 54
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
 228:	06 c0       	rjmp	.+12     	; 0x236 <u8admin_control+0x14e>
												LCDstring(off,sizeof(off)-1,HLCD_NUM0);
 22a:	40 e0       	ldi	r20, 0x00	; 0
 22c:	63 e0       	ldi	r22, 0x03	; 3
 22e:	8e e1       	ldi	r24, 0x1E	; 30
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					lcd_write_data(COMMAND,0xc0,HLCD_NUM0);
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	60 ec       	ldi	r22, 0xC0	; 192
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
					LCDstring(choose_op_level,sizeof(choose_op_level)-1,HLCD_NUM0);
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	6a e0       	ldi	r22, 0x0A	; 10
 244:	83 ef       	ldi	r24, 0xF3	; 243
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					while (value_in_keypad==1)
 24c:	16 c0       	rjmp	.+44     	; 0x27a <u8admin_control+0x192>
					{
						keypadgetnumber(&HKEYPAD_arrayofkeypads[0],&value_in_keypad);
 24e:	64 e4       	ldi	r22, 0x44	; 68
 250:	71 e0       	ldi	r23, 0x01	; 1
 252:	87 e9       	ldi	r24, 0x97	; 151
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 1c 05 	call	0xa38	; 0xa38 <keypadgetnumber>
						if (1!=value_in_keypad)
 25a:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <value_in_keypad>
 25e:	61 30       	cpi	r22, 0x01	; 1
 260:	61 f0       	breq	.+24     	; 0x27a <u8admin_control+0x192>
						{
							lcd_write_data(DATA,value_in_keypad,HLCD_NUM0);
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
							spi_master_transmit_byte(value_in_keypad);	
 26a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <value_in_keypad>
 26e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <spi_master_transmit_byte>
							lcdclear();
 272:	0e 94 0a 0a 	call	0x1414	; 0x1414 <lcdclear>
							lcd_flag=0;				
 276:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <lcd_flag>
					LCDstring(status,sizeof(status)-1,HLCD_NUM0);
					loads_status.state_of_led1 ?LCDstring(on,sizeof(on)-1,HLCD_NUM0) :
												LCDstring(off,sizeof(off)-1,HLCD_NUM0);
					lcd_write_data(COMMAND,0xc0,HLCD_NUM0);
					LCDstring(choose_op_level,sizeof(choose_op_level)-1,HLCD_NUM0);
					while (value_in_keypad==1)
 27a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <value_in_keypad>
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	31 f3       	breq	.-52     	; 0x24e <u8admin_control+0x166>
 282:	f1 c1       	rjmp	.+994    	; 0x666 <__EEPROM_REGION_LENGTH__+0x266>
					}
				//	local_variable=4;
					break	;
					
					case '2':
					value_in_keypad=1;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <value_in_keypad>
					spi_master_transmit_byte(2);
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	0e 94 d7 09 	call	0x13ae	; 0x13ae <spi_master_transmit_byte>
 290:	2f ef       	ldi	r18, 0xFF	; 255
 292:	81 ee       	ldi	r24, 0xE1	; 225
 294:	94 e0       	ldi	r25, 0x04	; 4
 296:	21 50       	subi	r18, 0x01	; 1
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <u8admin_control+0x1ae>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <u8admin_control+0x1b8>
 2a0:	00 00       	nop
					_delay_ms(100);
					spi_master_receive_byte(&(loads_status.state_of_led2));
 2a2:	82 e6       	ldi	r24, 0x62	; 98
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 8c 09 	call	0x1318	; 0x1318 <spi_master_receive_byte>
					lcdclear();
 2aa:	0e 94 0a 0a 	call	0x1414	; 0x1414 <lcdclear>
					LCDstring(status,sizeof(status)-1,HLCD_NUM0);
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	67 e0       	ldi	r22, 0x07	; 7
 2b2:	88 e0       	ldi	r24, 0x08	; 8
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					loads_status.state_of_led2 ?LCDstring(on,sizeof(on)-1,HLCD_NUM0) :
 2ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 2be:	88 23       	and	r24, r24
 2c0:	39 f0       	breq	.+14     	; 0x2d0 <u8admin_control+0x1e8>
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	62 e0       	ldi	r22, 0x02	; 2
 2c6:	86 e3       	ldi	r24, 0x36	; 54
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
 2ce:	06 c0       	rjmp	.+12     	; 0x2dc <u8admin_control+0x1f4>
												LCDstring(off,sizeof(off)-1,HLCD_NUM0);
 2d0:	40 e0       	ldi	r20, 0x00	; 0
 2d2:	63 e0       	ldi	r22, 0x03	; 3
 2d4:	8e e1       	ldi	r24, 0x1E	; 30
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					lcd_write_data(COMMAND,0xc0,HLCD_NUM0);
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	60 ec       	ldi	r22, 0xC0	; 192
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
					LCDstring(choose_op_level,sizeof(choose_op_level)-1,HLCD_NUM0);
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	6a e0       	ldi	r22, 0x0A	; 10
 2ea:	83 ef       	ldi	r24, 0xF3	; 243
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					while (value_in_keypad==1)
 2f2:	16 c0       	rjmp	.+44     	; 0x320 <u8admin_control+0x238>
					{
						keypadgetnumber(&HKEYPAD_arrayofkeypads[0],&value_in_keypad);
 2f4:	64 e4       	ldi	r22, 0x44	; 68
 2f6:	71 e0       	ldi	r23, 0x01	; 1
 2f8:	87 e9       	ldi	r24, 0x97	; 151
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 1c 05 	call	0xa38	; 0xa38 <keypadgetnumber>
						if (1!=value_in_keypad)
 300:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <value_in_keypad>
 304:	61 30       	cpi	r22, 0x01	; 1
 306:	61 f0       	breq	.+24     	; 0x320 <u8admin_control+0x238>
						{
							lcd_write_data(DATA,value_in_keypad,HLCD_NUM0);
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
							spi_master_transmit_byte(value_in_keypad);
 310:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <value_in_keypad>
 314:	0e 94 d7 09 	call	0x13ae	; 0x13ae <spi_master_transmit_byte>
							lcdclear();
 318:	0e 94 0a 0a 	call	0x1414	; 0x1414 <lcdclear>
							lcd_flag=0;	
 31c:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <lcd_flag>
					LCDstring(status,sizeof(status)-1,HLCD_NUM0);
					loads_status.state_of_led2 ?LCDstring(on,sizeof(on)-1,HLCD_NUM0) :
												LCDstring(off,sizeof(off)-1,HLCD_NUM0);
					lcd_write_data(COMMAND,0xc0,HLCD_NUM0);
					LCDstring(choose_op_level,sizeof(choose_op_level)-1,HLCD_NUM0);
					while (value_in_keypad==1)
 320:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <value_in_keypad>
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	31 f3       	breq	.-52     	; 0x2f4 <u8admin_control+0x20c>
 328:	9e c1       	rjmp	.+828    	; 0x666 <__EEPROM_REGION_LENGTH__+0x266>
					}
					//local_variable=4;
					break	;
					
					case '3':
					value_in_keypad=1;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <value_in_keypad>
					spi_master_transmit_byte(3);
 330:	83 e0       	ldi	r24, 0x03	; 3
 332:	0e 94 d7 09 	call	0x13ae	; 0x13ae <spi_master_transmit_byte>
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	81 ee       	ldi	r24, 0xE1	; 225
 33a:	94 e0       	ldi	r25, 0x04	; 4
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <u8admin_control+0x254>
 344:	00 c0       	rjmp	.+0      	; 0x346 <u8admin_control+0x25e>
 346:	00 00       	nop
					_delay_ms(100);
					spi_master_receive_byte(&(loads_status.state_of_led3));
 348:	83 e6       	ldi	r24, 0x63	; 99
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 8c 09 	call	0x1318	; 0x1318 <spi_master_receive_byte>
					lcdclear();
 350:	0e 94 0a 0a 	call	0x1414	; 0x1414 <lcdclear>
					LCDstring(status,sizeof(status)-1,HLCD_NUM0);
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	67 e0       	ldi	r22, 0x07	; 7
 358:	88 e0       	ldi	r24, 0x08	; 8
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					loads_status.state_of_led3 ?LCDstring(on,sizeof(on)-1,HLCD_NUM0) :
 360:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 364:	88 23       	and	r24, r24
 366:	39 f0       	breq	.+14     	; 0x376 <u8admin_control+0x28e>
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	62 e0       	ldi	r22, 0x02	; 2
 36c:	86 e3       	ldi	r24, 0x36	; 54
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
 374:	06 c0       	rjmp	.+12     	; 0x382 <u8admin_control+0x29a>
												LCDstring(off,sizeof(off)-1,HLCD_NUM0);
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	63 e0       	ldi	r22, 0x03	; 3
 37a:	8e e1       	ldi	r24, 0x1E	; 30
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					lcd_write_data(COMMAND,0xc0,HLCD_NUM0);
 382:	40 e0       	ldi	r20, 0x00	; 0
 384:	60 ec       	ldi	r22, 0xC0	; 192
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
					LCDstring(choose_op_level,sizeof(choose_op_level)-1,HLCD_NUM0);
 38c:	40 e0       	ldi	r20, 0x00	; 0
 38e:	6a e0       	ldi	r22, 0x0A	; 10
 390:	83 ef       	ldi	r24, 0xF3	; 243
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					while (value_in_keypad==1)
 398:	16 c0       	rjmp	.+44     	; 0x3c6 <u8admin_control+0x2de>
					{
						keypadgetnumber(&HKEYPAD_arrayofkeypads[0],&value_in_keypad);
 39a:	64 e4       	ldi	r22, 0x44	; 68
 39c:	71 e0       	ldi	r23, 0x01	; 1
 39e:	87 e9       	ldi	r24, 0x97	; 151
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 1c 05 	call	0xa38	; 0xa38 <keypadgetnumber>
						if (1!=value_in_keypad)
 3a6:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <value_in_keypad>
 3aa:	61 30       	cpi	r22, 0x01	; 1
 3ac:	61 f0       	breq	.+24     	; 0x3c6 <u8admin_control+0x2de>
						{
							lcd_write_data(DATA,value_in_keypad,HLCD_NUM0);
 3ae:	40 e0       	ldi	r20, 0x00	; 0
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
							spi_master_transmit_byte(value_in_keypad);
 3b6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <value_in_keypad>
 3ba:	0e 94 d7 09 	call	0x13ae	; 0x13ae <spi_master_transmit_byte>
							lcdclear();
 3be:	0e 94 0a 0a 	call	0x1414	; 0x1414 <lcdclear>
							lcd_flag=0;	
 3c2:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <lcd_flag>
					LCDstring(status,sizeof(status)-1,HLCD_NUM0);
					loads_status.state_of_led3 ?LCDstring(on,sizeof(on)-1,HLCD_NUM0) :
												LCDstring(off,sizeof(off)-1,HLCD_NUM0);
					lcd_write_data(COMMAND,0xc0,HLCD_NUM0);
					LCDstring(choose_op_level,sizeof(choose_op_level)-1,HLCD_NUM0);
					while (value_in_keypad==1)
 3c6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <value_in_keypad>
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	31 f3       	breq	.-52     	; 0x39a <u8admin_control+0x2b2>
 3ce:	4b c1       	rjmp	.+662    	; 0x666 <__EEPROM_REGION_LENGTH__+0x266>
					}
					//local_variable=4;					
					break	;
					
					case '4':
					value_in_keypad=1;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <value_in_keypad>
					spi_master_transmit_byte(4);
 3d6:	84 e0       	ldi	r24, 0x04	; 4
 3d8:	0e 94 d7 09 	call	0x13ae	; 0x13ae <spi_master_transmit_byte>
 3dc:	2f ef       	ldi	r18, 0xFF	; 255
 3de:	81 ee       	ldi	r24, 0xE1	; 225
 3e0:	94 e0       	ldi	r25, 0x04	; 4
 3e2:	21 50       	subi	r18, 0x01	; 1
 3e4:	80 40       	sbci	r24, 0x00	; 0
 3e6:	90 40       	sbci	r25, 0x00	; 0
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <u8admin_control+0x2fa>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <u8admin_control+0x304>
 3ec:	00 00       	nop
					_delay_ms(100);
					spi_master_receive_byte(&(loads_status.state_of_led4));
 3ee:	84 e6       	ldi	r24, 0x64	; 100
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 8c 09 	call	0x1318	; 0x1318 <spi_master_receive_byte>
					lcdclear();
 3f6:	0e 94 0a 0a 	call	0x1414	; 0x1414 <lcdclear>
					LCDstring(status,sizeof(status)-1,HLCD_NUM0);
 3fa:	40 e0       	ldi	r20, 0x00	; 0
 3fc:	67 e0       	ldi	r22, 0x07	; 7
 3fe:	88 e0       	ldi	r24, 0x08	; 8
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					loads_status.state_of_led4 ?LCDstring(on,sizeof(on)-1,HLCD_NUM0) :
 406:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 40a:	88 23       	and	r24, r24
 40c:	39 f0       	breq	.+14     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	86 e3       	ldi	r24, 0x36	; 54
 414:	91 e0       	ldi	r25, 0x01	; 1
 416:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
 41a:	06 c0       	rjmp	.+12     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
												LCDstring(off,sizeof(off)-1,HLCD_NUM0);
 41c:	40 e0       	ldi	r20, 0x00	; 0
 41e:	63 e0       	ldi	r22, 0x03	; 3
 420:	8e e1       	ldi	r24, 0x1E	; 30
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					lcd_write_data(COMMAND,0xc0,HLCD_NUM0);
 428:	40 e0       	ldi	r20, 0x00	; 0
 42a:	60 ec       	ldi	r22, 0xC0	; 192
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
					LCDstring(choose_op_level,sizeof(choose_op_level)-1,HLCD_NUM0);
 432:	40 e0       	ldi	r20, 0x00	; 0
 434:	6a e0       	ldi	r22, 0x0A	; 10
 436:	83 ef       	ldi	r24, 0xF3	; 243
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					while (value_in_keypad==1)
 43e:	16 c0       	rjmp	.+44     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
					{
						keypadgetnumber(&HKEYPAD_arrayofkeypads[0],&value_in_keypad);
 440:	64 e4       	ldi	r22, 0x44	; 68
 442:	71 e0       	ldi	r23, 0x01	; 1
 444:	87 e9       	ldi	r24, 0x97	; 151
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	0e 94 1c 05 	call	0xa38	; 0xa38 <keypadgetnumber>
						if (1!=value_in_keypad)
 44c:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <value_in_keypad>
 450:	61 30       	cpi	r22, 0x01	; 1
 452:	61 f0       	breq	.+24     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
						{
							lcd_write_data(DATA,value_in_keypad,HLCD_NUM0);
 454:	40 e0       	ldi	r20, 0x00	; 0
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
							spi_master_transmit_byte(value_in_keypad);
 45c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <value_in_keypad>
 460:	0e 94 d7 09 	call	0x13ae	; 0x13ae <spi_master_transmit_byte>
							lcdclear();
 464:	0e 94 0a 0a 	call	0x1414	; 0x1414 <lcdclear>
							lcd_flag=0;	
 468:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <lcd_flag>
					LCDstring(status,sizeof(status)-1,HLCD_NUM0);
					loads_status.state_of_led4 ?LCDstring(on,sizeof(on)-1,HLCD_NUM0) :
												LCDstring(off,sizeof(off)-1,HLCD_NUM0);
					lcd_write_data(COMMAND,0xc0,HLCD_NUM0);
					LCDstring(choose_op_level,sizeof(choose_op_level)-1,HLCD_NUM0);
					while (value_in_keypad==1)
 46c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <value_in_keypad>
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	31 f3       	breq	.-52     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 474:	f8 c0       	rjmp	.+496    	; 0x666 <__EEPROM_REGION_LENGTH__+0x266>
					}				
					//local_variable=4;
					break	;
					
					case '5':
					value_in_keypad=1;
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <value_in_keypad>
					spi_master_transmit_byte(5);
 47c:	85 e0       	ldi	r24, 0x05	; 5
 47e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <spi_master_transmit_byte>
 482:	2f ef       	ldi	r18, 0xFF	; 255
 484:	81 ee       	ldi	r24, 0xE1	; 225
 486:	94 e0       	ldi	r25, 0x04	; 4
 488:	21 50       	subi	r18, 0x01	; 1
 48a:	80 40       	sbci	r24, 0x00	; 0
 48c:	90 40       	sbci	r25, 0x00	; 0
 48e:	e1 f7       	brne	.-8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 492:	00 00       	nop
					_delay_ms(100);
					spi_master_receive_byte(&(loads_status.state_of_led5));
 494:	85 e6       	ldi	r24, 0x65	; 101
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 8c 09 	call	0x1318	; 0x1318 <spi_master_receive_byte>
					lcdclear();
 49c:	0e 94 0a 0a 	call	0x1414	; 0x1414 <lcdclear>
					LCDstring(status,sizeof(status)-1,HLCD_NUM0);
 4a0:	40 e0       	ldi	r20, 0x00	; 0
 4a2:	67 e0       	ldi	r22, 0x07	; 7
 4a4:	88 e0       	ldi	r24, 0x08	; 8
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					loads_status.state_of_led5 ?LCDstring(on,sizeof(on)-1,HLCD_NUM0) :
 4ac:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 4b0:	88 23       	and	r24, r24
 4b2:	39 f0       	breq	.+14     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4b4:	40 e0       	ldi	r20, 0x00	; 0
 4b6:	62 e0       	ldi	r22, 0x02	; 2
 4b8:	86 e3       	ldi	r24, 0x36	; 54
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
 4c0:	06 c0       	rjmp	.+12     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
												LCDstring(off,sizeof(off)-1,HLCD_NUM0);
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	63 e0       	ldi	r22, 0x03	; 3
 4c6:	8e e1       	ldi	r24, 0x1E	; 30
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					lcd_write_data(COMMAND,0xc0,HLCD_NUM0);
 4ce:	40 e0       	ldi	r20, 0x00	; 0
 4d0:	60 ec       	ldi	r22, 0xC0	; 192
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
					LCDstring(choose_op_level,sizeof(choose_op_level)-1,HLCD_NUM0);
 4d8:	40 e0       	ldi	r20, 0x00	; 0
 4da:	6a e0       	ldi	r22, 0x0A	; 10
 4dc:	83 ef       	ldi	r24, 0xF3	; 243
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					while (value_in_keypad==1)
 4e4:	16 c0       	rjmp	.+44     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
					{
						keypadgetnumber(&HKEYPAD_arrayofkeypads[0],&value_in_keypad);
 4e6:	64 e4       	ldi	r22, 0x44	; 68
 4e8:	71 e0       	ldi	r23, 0x01	; 1
 4ea:	87 e9       	ldi	r24, 0x97	; 151
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 1c 05 	call	0xa38	; 0xa38 <keypadgetnumber>
						if (1!=value_in_keypad)
 4f2:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <value_in_keypad>
 4f6:	61 30       	cpi	r22, 0x01	; 1
 4f8:	61 f0       	breq	.+24     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
						{
							lcd_write_data(DATA,value_in_keypad,HLCD_NUM0);
 4fa:	40 e0       	ldi	r20, 0x00	; 0
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
							spi_master_transmit_byte(value_in_keypad);
 502:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <value_in_keypad>
 506:	0e 94 d7 09 	call	0x13ae	; 0x13ae <spi_master_transmit_byte>
							lcdclear();
 50a:	0e 94 0a 0a 	call	0x1414	; 0x1414 <lcdclear>
							lcd_flag=0;	
 50e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <lcd_flag>
					LCDstring(status,sizeof(status)-1,HLCD_NUM0);
					loads_status.state_of_led5 ?LCDstring(on,sizeof(on)-1,HLCD_NUM0) :
												LCDstring(off,sizeof(off)-1,HLCD_NUM0);
					lcd_write_data(COMMAND,0xc0,HLCD_NUM0);
					LCDstring(choose_op_level,sizeof(choose_op_level)-1,HLCD_NUM0);
					while (value_in_keypad==1)
 512:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <value_in_keypad>
 516:	81 30       	cpi	r24, 0x01	; 1
 518:	31 f3       	breq	.-52     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 51a:	a5 c0       	rjmp	.+330    	; 0x666 <__EEPROM_REGION_LENGTH__+0x266>
					}					
					//local_variable=4;
					break	;
					
					case '6':
					value_in_keypad=1;
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <value_in_keypad>
					spi_master_transmit_byte(6);
 522:	86 e0       	ldi	r24, 0x06	; 6
 524:	0e 94 d7 09 	call	0x13ae	; 0x13ae <spi_master_transmit_byte>
 528:	2f ef       	ldi	r18, 0xFF	; 255
 52a:	81 ee       	ldi	r24, 0xE1	; 225
 52c:	94 e0       	ldi	r25, 0x04	; 4
 52e:	21 50       	subi	r18, 0x01	; 1
 530:	80 40       	sbci	r24, 0x00	; 0
 532:	90 40       	sbci	r25, 0x00	; 0
 534:	e1 f7       	brne	.-8      	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 536:	00 c0       	rjmp	.+0      	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 538:	00 00       	nop
					_delay_ms(100);
					spi_master_receive_byte(&(loads_status.state_of_led6));
 53a:	86 e6       	ldi	r24, 0x66	; 102
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 8c 09 	call	0x1318	; 0x1318 <spi_master_receive_byte>
					lcdclear();
 542:	0e 94 0a 0a 	call	0x1414	; 0x1414 <lcdclear>
					LCDstring(status,sizeof(status)-1,HLCD_NUM0);
 546:	40 e0       	ldi	r20, 0x00	; 0
 548:	67 e0       	ldi	r22, 0x07	; 7
 54a:	88 e0       	ldi	r24, 0x08	; 8
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					loads_status.state_of_led6 ?LCDstring(on,sizeof(on)-1,HLCD_NUM0) :
 552:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 556:	88 23       	and	r24, r24
 558:	39 f0       	breq	.+14     	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
 55a:	40 e0       	ldi	r20, 0x00	; 0
 55c:	62 e0       	ldi	r22, 0x02	; 2
 55e:	86 e3       	ldi	r24, 0x36	; 54
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
 566:	06 c0       	rjmp	.+12     	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
												LCDstring(off,sizeof(off)-1,HLCD_NUM0);
 568:	40 e0       	ldi	r20, 0x00	; 0
 56a:	63 e0       	ldi	r22, 0x03	; 3
 56c:	8e e1       	ldi	r24, 0x1E	; 30
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					lcd_write_data(COMMAND,0xc0,HLCD_NUM0);
 574:	40 e0       	ldi	r20, 0x00	; 0
 576:	60 ec       	ldi	r22, 0xC0	; 192
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
					LCDstring(choose_op_level,sizeof(choose_op_level)-1,HLCD_NUM0);
 57e:	40 e0       	ldi	r20, 0x00	; 0
 580:	6a e0       	ldi	r22, 0x0A	; 10
 582:	83 ef       	ldi	r24, 0xF3	; 243
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					while (value_in_keypad==1)
 58a:	16 c0       	rjmp	.+44     	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
					{
						keypadgetnumber(&HKEYPAD_arrayofkeypads[0],&value_in_keypad);
 58c:	64 e4       	ldi	r22, 0x44	; 68
 58e:	71 e0       	ldi	r23, 0x01	; 1
 590:	87 e9       	ldi	r24, 0x97	; 151
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 1c 05 	call	0xa38	; 0xa38 <keypadgetnumber>
						if (1!=value_in_keypad)
 598:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <value_in_keypad>
 59c:	61 30       	cpi	r22, 0x01	; 1
 59e:	61 f0       	breq	.+24     	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
						{
							lcd_write_data(DATA,value_in_keypad,HLCD_NUM0);
 5a0:	40 e0       	ldi	r20, 0x00	; 0
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
							spi_master_transmit_byte(value_in_keypad);
 5a8:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <value_in_keypad>
 5ac:	0e 94 d7 09 	call	0x13ae	; 0x13ae <spi_master_transmit_byte>
							lcdclear();
 5b0:	0e 94 0a 0a 	call	0x1414	; 0x1414 <lcdclear>
							lcd_flag=0;	
 5b4:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <lcd_flag>
					LCDstring(status,sizeof(status)-1,HLCD_NUM0);
					loads_status.state_of_led6 ?LCDstring(on,sizeof(on)-1,HLCD_NUM0) :
												LCDstring(off,sizeof(off)-1,HLCD_NUM0);
					lcd_write_data(COMMAND,0xc0,HLCD_NUM0);
					LCDstring(choose_op_level,sizeof(choose_op_level)-1,HLCD_NUM0);
					while (value_in_keypad==1)
 5b8:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <value_in_keypad>
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	31 f3       	breq	.-52     	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
 5c0:	52 c0       	rjmp	.+164    	; 0x666 <__EEPROM_REGION_LENGTH__+0x266>
					}				
					//local_variable=4;
					break	;
					
					case '7':
					value_in_keypad=1;
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <value_in_keypad>
					spi_master_transmit_byte(7);
 5c8:	87 e0       	ldi	r24, 0x07	; 7
 5ca:	0e 94 d7 09 	call	0x13ae	; 0x13ae <spi_master_transmit_byte>
 5ce:	2f ef       	ldi	r18, 0xFF	; 255
 5d0:	81 ee       	ldi	r24, 0xE1	; 225
 5d2:	94 e0       	ldi	r25, 0x04	; 4
 5d4:	21 50       	subi	r18, 0x01	; 1
 5d6:	80 40       	sbci	r24, 0x00	; 0
 5d8:	90 40       	sbci	r25, 0x00	; 0
 5da:	e1 f7       	brne	.-8      	; 0x5d4 <__EEPROM_REGION_LENGTH__+0x1d4>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
 5de:	00 00       	nop
					_delay_ms(100);
					spi_master_receive_byte(&(loads_status.state_of_led7));
 5e0:	87 e6       	ldi	r24, 0x67	; 103
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	0e 94 8c 09 	call	0x1318	; 0x1318 <spi_master_receive_byte>
					lcdclear();
 5e8:	0e 94 0a 0a 	call	0x1414	; 0x1414 <lcdclear>
					LCDstring(status,sizeof(status)-1,HLCD_NUM0);
 5ec:	40 e0       	ldi	r20, 0x00	; 0
 5ee:	67 e0       	ldi	r22, 0x07	; 7
 5f0:	88 e0       	ldi	r24, 0x08	; 8
 5f2:	91 e0       	ldi	r25, 0x01	; 1
 5f4:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					loads_status.state_of_led7 ?LCDstring(on,sizeof(on)-1,HLCD_NUM0) :
 5f8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 5fc:	88 23       	and	r24, r24
 5fe:	39 f0       	breq	.+14     	; 0x60e <__EEPROM_REGION_LENGTH__+0x20e>
 600:	40 e0       	ldi	r20, 0x00	; 0
 602:	62 e0       	ldi	r22, 0x02	; 2
 604:	86 e3       	ldi	r24, 0x36	; 54
 606:	91 e0       	ldi	r25, 0x01	; 1
 608:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
 60c:	06 c0       	rjmp	.+12     	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
												LCDstring(off,sizeof(off)-1,HLCD_NUM0);
 60e:	40 e0       	ldi	r20, 0x00	; 0
 610:	63 e0       	ldi	r22, 0x03	; 3
 612:	8e e1       	ldi	r24, 0x1E	; 30
 614:	91 e0       	ldi	r25, 0x01	; 1
 616:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					lcd_write_data(COMMAND,0xc0,HLCD_NUM0);
 61a:	40 e0       	ldi	r20, 0x00	; 0
 61c:	60 ec       	ldi	r22, 0xC0	; 192
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
					LCDstring(choose_op_level,sizeof(choose_op_level)-1,HLCD_NUM0);
 624:	40 e0       	ldi	r20, 0x00	; 0
 626:	6a e0       	ldi	r22, 0x0A	; 10
 628:	83 ef       	ldi	r24, 0xF3	; 243
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 ab 08 	call	0x1156	; 0x1156 <LCDstring>
					while (value_in_keypad==1)
 630:	16 c0       	rjmp	.+44     	; 0x65e <__EEPROM_REGION_LENGTH__+0x25e>
					{
						keypadgetnumber(&HKEYPAD_arrayofkeypads[0],&value_in_keypad);
 632:	64 e4       	ldi	r22, 0x44	; 68
 634:	71 e0       	ldi	r23, 0x01	; 1
 636:	87 e9       	ldi	r24, 0x97	; 151
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	0e 94 1c 05 	call	0xa38	; 0xa38 <keypadgetnumber>
						if (1!=value_in_keypad)
 63e:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <value_in_keypad>
 642:	61 30       	cpi	r22, 0x01	; 1
 644:	61 f0       	breq	.+24     	; 0x65e <__EEPROM_REGION_LENGTH__+0x25e>
						{
							lcd_write_data(DATA,value_in_keypad,HLCD_NUM0);
 646:	40 e0       	ldi	r20, 0x00	; 0
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	0e 94 3c 03 	call	0x678	; 0x678 <lcd_write_data>
							spi_master_transmit_byte(value_in_keypad);
 64e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <value_in_keypad>
 652:	0e 94 d7 09 	call	0x13ae	; 0x13ae <spi_master_transmit_byte>
							lcdclear();
 656:	0e 94 0a 0a 	call	0x1414	; 0x1414 <lcdclear>
							lcd_flag=0;	
 65a:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <lcd_flag>
					LCDstring(status,sizeof(status)-1,HLCD_NUM0);
					loads_status.state_of_led7 ?LCDstring(on,sizeof(on)-1,HLCD_NUM0) :
												LCDstring(off,sizeof(off)-1,HLCD_NUM0);
					lcd_write_data(COMMAND,0xc0,HLCD_NUM0);
					LCDstring(choose_op_level,sizeof(choose_op_level)-1,HLCD_NUM0);
					while (value_in_keypad==1)
 65e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <value_in_keypad>
 662:	81 30       	cpi	r24, 0x01	; 1
 664:	31 f3       	breq	.-52     	; 0x632 <__EEPROM_REGION_LENGTH__+0x232>
					
					default:
					break	;
					
				}
				value_in_keypad=1;
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <value_in_keypad>
u8 u8admin_control(void)		//return 4
{
	u8 local_variable=3;
	while (3==local_variable)
	{
			if (0==lcd_flag)
 66c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <lcd_flag>
 670:	88 23       	and	r24, r24
 672:	09 f4       	brne	.+2      	; 0x676 <__EEPROM_REGION_LENGTH__+0x276>
 674:	3a cd       	rjmp	.-1420   	; 0xea <u8admin_control+0x2>
 676:	42 cd       	rjmp	.-1404   	; 0xfc <u8admin_control+0x14>

Disassembly of section .text.main:

00001292 <main>:
u8 choose_op_level[]="ON:1-OFF:0";

int main(void)
{
	//timer1_ctc_interrupt_call_back(servo_start);
	keypad_init();
    1292:	0e 94 cb 06 	call	0xd96	; 0xd96 <keypad_init>
	lcd_init();
    1296:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_init>
	//spi_master_init();
	
	sequence=u8check_if_admin_set_pass();
    129a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <u8check_if_admin_set_pass>
    129e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <sequence>
	while (1)
	{
			switch(sequence)
    12a2:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <sequence>
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	59 f0       	breq	.+22     	; 0x12c0 <main+0x2e>
    12aa:	28 f0       	brcs	.+10     	; 0x12b6 <main+0x24>
    12ac:	82 30       	cpi	r24, 0x02	; 2
    12ae:	69 f0       	breq	.+26     	; 0x12ca <main+0x38>
    12b0:	83 30       	cpi	r24, 0x03	; 3
    12b2:	81 f0       	breq	.+32     	; 0x12d4 <main+0x42>
    12b4:	f6 cf       	rjmp	.-20     	; 0x12a2 <main+0x10>
			{
				case 0:
				sequence=u8set_admin_pass();
    12b6:	0e 94 10 08 	call	0x1020	; 0x1020 <u8set_admin_pass>
    12ba:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <sequence>
				break;
    12be:	f1 cf       	rjmp	.-30     	; 0x12a2 <main+0x10>
				
				case 1:
				sequence=u8enter_admin_pass();
    12c0:	0e 94 46 08 	call	0x108c	; 0x108c <u8enter_admin_pass>
    12c4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <sequence>
				break;
    12c8:	ec cf       	rjmp	.-40     	; 0x12a2 <main+0x10>
				
				case 2:
				sequence=u8check_admin_pass();
    12ca:	0e 94 89 07 	call	0xf12	; 0xf12 <u8check_admin_pass>
    12ce:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <sequence>
				break;
    12d2:	e7 cf       	rjmp	.-50     	; 0x12a2 <main+0x10>
				
				case 3:
				sequence=u8admin_control();
    12d4:	0e 94 74 00 	call	0xe8	; 0xe8 <__data_load_end>

Disassembly of section .text.pin_direction:

00000b6e <pin_direction>:
			Toggle_BIT(PORTD_REGISTER,pstructcpy_pin->enumpin);
			break;									
		}
		return LSTY_EXECUTED_SUCCESSFULLY;
	}
}
 b6e:	fc 01       	movw	r30, r24
 b70:	21 81       	ldd	r18, Z+1	; 0x01
 b72:	24 30       	cpi	r18, 0x04	; 4
 b74:	08 f0       	brcs	.+2      	; 0xb78 <pin_direction+0xa>
 b76:	7d c0       	rjmp	.+250    	; 0xc72 <pin_direction+0x104>
 b78:	30 81       	ld	r19, Z
 b7a:	38 30       	cpi	r19, 0x08	; 8
 b7c:	08 f0       	brcs	.+2      	; 0xb80 <pin_direction+0x12>
 b7e:	7b c0       	rjmp	.+246    	; 0xc76 <pin_direction+0x108>
 b80:	82 81       	ldd	r24, Z+2	; 0x02
 b82:	82 30       	cpi	r24, 0x02	; 2
 b84:	08 f0       	brcs	.+2      	; 0xb88 <pin_direction+0x1a>
 b86:	79 c0       	rjmp	.+242    	; 0xc7a <pin_direction+0x10c>
 b88:	21 30       	cpi	r18, 0x01	; 1
 b8a:	11 f1       	breq	.+68     	; 0xbd0 <pin_direction+0x62>
 b8c:	30 f0       	brcs	.+12     	; 0xb9a <pin_direction+0x2c>
 b8e:	22 30       	cpi	r18, 0x02	; 2
 b90:	d1 f1       	breq	.+116    	; 0xc06 <pin_direction+0x98>
 b92:	23 30       	cpi	r18, 0x03	; 3
 b94:	09 f4       	brne	.+2      	; 0xb98 <pin_direction+0x2a>
 b96:	52 c0       	rjmp	.+164    	; 0xc3c <pin_direction+0xce>
 b98:	72 c0       	rjmp	.+228    	; 0xc7e <pin_direction+0x110>
 b9a:	81 11       	cpse	r24, r1
 b9c:	0d c0       	rjmp	.+26     	; 0xbb8 <pin_direction+0x4a>
 b9e:	2a b3       	in	r18, 0x1a	; 26
 ba0:	81 e0       	ldi	r24, 0x01	; 1
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	02 c0       	rjmp	.+4      	; 0xbaa <pin_direction+0x3c>
 ba6:	88 0f       	add	r24, r24
 ba8:	99 1f       	adc	r25, r25
 baa:	3a 95       	dec	r19
 bac:	e2 f7       	brpl	.-8      	; 0xba6 <pin_direction+0x38>
 bae:	80 95       	com	r24
 bb0:	82 23       	and	r24, r18
 bb2:	8a bb       	out	0x1a, r24	; 26
 bb4:	80 e0       	ldi	r24, 0x00	; 0
 bb6:	08 95       	ret
 bb8:	2a b3       	in	r18, 0x1a	; 26
 bba:	81 e0       	ldi	r24, 0x01	; 1
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <pin_direction+0x56>
 bc0:	88 0f       	add	r24, r24
 bc2:	99 1f       	adc	r25, r25
 bc4:	3a 95       	dec	r19
 bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <pin_direction+0x52>
 bc8:	82 2b       	or	r24, r18
 bca:	8a bb       	out	0x1a, r24	; 26
 bcc:	80 e0       	ldi	r24, 0x00	; 0
 bce:	08 95       	ret
 bd0:	81 11       	cpse	r24, r1
 bd2:	0d c0       	rjmp	.+26     	; 0xbee <pin_direction+0x80>
 bd4:	27 b3       	in	r18, 0x17	; 23
 bd6:	81 e0       	ldi	r24, 0x01	; 1
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	02 c0       	rjmp	.+4      	; 0xbe0 <pin_direction+0x72>
 bdc:	88 0f       	add	r24, r24
 bde:	99 1f       	adc	r25, r25
 be0:	3a 95       	dec	r19
 be2:	e2 f7       	brpl	.-8      	; 0xbdc <pin_direction+0x6e>
 be4:	80 95       	com	r24
 be6:	82 23       	and	r24, r18
 be8:	87 bb       	out	0x17, r24	; 23
 bea:	80 e0       	ldi	r24, 0x00	; 0
 bec:	08 95       	ret
 bee:	27 b3       	in	r18, 0x17	; 23
 bf0:	81 e0       	ldi	r24, 0x01	; 1
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	02 c0       	rjmp	.+4      	; 0xbfa <pin_direction+0x8c>
 bf6:	88 0f       	add	r24, r24
 bf8:	99 1f       	adc	r25, r25
 bfa:	3a 95       	dec	r19
 bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <pin_direction+0x88>
 bfe:	82 2b       	or	r24, r18
 c00:	87 bb       	out	0x17, r24	; 23
 c02:	80 e0       	ldi	r24, 0x00	; 0
 c04:	08 95       	ret
 c06:	81 11       	cpse	r24, r1
 c08:	0d c0       	rjmp	.+26     	; 0xc24 <pin_direction+0xb6>
 c0a:	24 b3       	in	r18, 0x14	; 20
 c0c:	81 e0       	ldi	r24, 0x01	; 1
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	02 c0       	rjmp	.+4      	; 0xc16 <pin_direction+0xa8>
 c12:	88 0f       	add	r24, r24
 c14:	99 1f       	adc	r25, r25
 c16:	3a 95       	dec	r19
 c18:	e2 f7       	brpl	.-8      	; 0xc12 <pin_direction+0xa4>
 c1a:	80 95       	com	r24
 c1c:	82 23       	and	r24, r18
 c1e:	84 bb       	out	0x14, r24	; 20
 c20:	80 e0       	ldi	r24, 0x00	; 0
 c22:	08 95       	ret
 c24:	24 b3       	in	r18, 0x14	; 20
 c26:	81 e0       	ldi	r24, 0x01	; 1
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	02 c0       	rjmp	.+4      	; 0xc30 <pin_direction+0xc2>
 c2c:	88 0f       	add	r24, r24
 c2e:	99 1f       	adc	r25, r25
 c30:	3a 95       	dec	r19
 c32:	e2 f7       	brpl	.-8      	; 0xc2c <pin_direction+0xbe>
 c34:	82 2b       	or	r24, r18
 c36:	84 bb       	out	0x14, r24	; 20
 c38:	80 e0       	ldi	r24, 0x00	; 0
 c3a:	08 95       	ret
 c3c:	81 11       	cpse	r24, r1
 c3e:	0d c0       	rjmp	.+26     	; 0xc5a <pin_direction+0xec>
 c40:	21 b3       	in	r18, 0x11	; 17
 c42:	81 e0       	ldi	r24, 0x01	; 1
 c44:	90 e0       	ldi	r25, 0x00	; 0
 c46:	02 c0       	rjmp	.+4      	; 0xc4c <pin_direction+0xde>
 c48:	88 0f       	add	r24, r24
 c4a:	99 1f       	adc	r25, r25
 c4c:	3a 95       	dec	r19
 c4e:	e2 f7       	brpl	.-8      	; 0xc48 <pin_direction+0xda>
 c50:	80 95       	com	r24
 c52:	82 23       	and	r24, r18
 c54:	81 bb       	out	0x11, r24	; 17
 c56:	80 e0       	ldi	r24, 0x00	; 0
 c58:	08 95       	ret
 c5a:	21 b3       	in	r18, 0x11	; 17
 c5c:	81 e0       	ldi	r24, 0x01	; 1
 c5e:	90 e0       	ldi	r25, 0x00	; 0
 c60:	02 c0       	rjmp	.+4      	; 0xc66 <pin_direction+0xf8>
 c62:	88 0f       	add	r24, r24
 c64:	99 1f       	adc	r25, r25
 c66:	3a 95       	dec	r19
 c68:	e2 f7       	brpl	.-8      	; 0xc62 <pin_direction+0xf4>
 c6a:	82 2b       	or	r24, r18
 c6c:	81 bb       	out	0x11, r24	; 17
 c6e:	80 e0       	ldi	r24, 0x00	; 0
 c70:	08 95       	ret
 c72:	81 e0       	ldi	r24, 0x01	; 1
 c74:	08 95       	ret
 c76:	81 e0       	ldi	r24, 0x01	; 1
 c78:	08 95       	ret
 c7a:	81 e0       	ldi	r24, 0x01	; 1
 c7c:	08 95       	ret
 c7e:	80 e0       	ldi	r24, 0x00	; 0
 c80:	08 95       	ret

Disassembly of section .text.pin_value:

00000c82 <pin_value>:
 c82:	fc 01       	movw	r30, r24
 c84:	21 81       	ldd	r18, Z+1	; 0x01
 c86:	24 30       	cpi	r18, 0x04	; 4
 c88:	08 f0       	brcs	.+2      	; 0xc8c <pin_value+0xa>
 c8a:	7d c0       	rjmp	.+250    	; 0xd86 <pin_value+0x104>
 c8c:	30 81       	ld	r19, Z
 c8e:	38 30       	cpi	r19, 0x08	; 8
 c90:	08 f0       	brcs	.+2      	; 0xc94 <pin_value+0x12>
 c92:	7b c0       	rjmp	.+246    	; 0xd8a <pin_value+0x108>
 c94:	83 81       	ldd	r24, Z+3	; 0x03
 c96:	82 30       	cpi	r24, 0x02	; 2
 c98:	08 f0       	brcs	.+2      	; 0xc9c <pin_value+0x1a>
 c9a:	79 c0       	rjmp	.+242    	; 0xd8e <pin_value+0x10c>
 c9c:	21 30       	cpi	r18, 0x01	; 1
 c9e:	11 f1       	breq	.+68     	; 0xce4 <pin_value+0x62>
 ca0:	30 f0       	brcs	.+12     	; 0xcae <pin_value+0x2c>
 ca2:	22 30       	cpi	r18, 0x02	; 2
 ca4:	d1 f1       	breq	.+116    	; 0xd1a <pin_value+0x98>
 ca6:	23 30       	cpi	r18, 0x03	; 3
 ca8:	09 f4       	brne	.+2      	; 0xcac <pin_value+0x2a>
 caa:	52 c0       	rjmp	.+164    	; 0xd50 <pin_value+0xce>
 cac:	72 c0       	rjmp	.+228    	; 0xd92 <pin_value+0x110>
 cae:	81 11       	cpse	r24, r1
 cb0:	0d c0       	rjmp	.+26     	; 0xccc <pin_value+0x4a>
 cb2:	2b b3       	in	r18, 0x1b	; 27
 cb4:	81 e0       	ldi	r24, 0x01	; 1
 cb6:	90 e0       	ldi	r25, 0x00	; 0
 cb8:	02 c0       	rjmp	.+4      	; 0xcbe <pin_value+0x3c>
 cba:	88 0f       	add	r24, r24
 cbc:	99 1f       	adc	r25, r25
 cbe:	3a 95       	dec	r19
 cc0:	e2 f7       	brpl	.-8      	; 0xcba <pin_value+0x38>
 cc2:	80 95       	com	r24
 cc4:	82 23       	and	r24, r18
 cc6:	8b bb       	out	0x1b, r24	; 27
 cc8:	80 e0       	ldi	r24, 0x00	; 0
 cca:	08 95       	ret
 ccc:	2b b3       	in	r18, 0x1b	; 27
 cce:	81 e0       	ldi	r24, 0x01	; 1
 cd0:	90 e0       	ldi	r25, 0x00	; 0
 cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <pin_value+0x56>
 cd4:	88 0f       	add	r24, r24
 cd6:	99 1f       	adc	r25, r25
 cd8:	3a 95       	dec	r19
 cda:	e2 f7       	brpl	.-8      	; 0xcd4 <pin_value+0x52>
 cdc:	82 2b       	or	r24, r18
 cde:	8b bb       	out	0x1b, r24	; 27
 ce0:	80 e0       	ldi	r24, 0x00	; 0
 ce2:	08 95       	ret
 ce4:	81 11       	cpse	r24, r1
 ce6:	0d c0       	rjmp	.+26     	; 0xd02 <pin_value+0x80>
 ce8:	28 b3       	in	r18, 0x18	; 24
 cea:	81 e0       	ldi	r24, 0x01	; 1
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	02 c0       	rjmp	.+4      	; 0xcf4 <pin_value+0x72>
 cf0:	88 0f       	add	r24, r24
 cf2:	99 1f       	adc	r25, r25
 cf4:	3a 95       	dec	r19
 cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <pin_value+0x6e>
 cf8:	80 95       	com	r24
 cfa:	82 23       	and	r24, r18
 cfc:	88 bb       	out	0x18, r24	; 24
 cfe:	80 e0       	ldi	r24, 0x00	; 0
 d00:	08 95       	ret
 d02:	28 b3       	in	r18, 0x18	; 24
 d04:	81 e0       	ldi	r24, 0x01	; 1
 d06:	90 e0       	ldi	r25, 0x00	; 0
 d08:	02 c0       	rjmp	.+4      	; 0xd0e <pin_value+0x8c>
 d0a:	88 0f       	add	r24, r24
 d0c:	99 1f       	adc	r25, r25
 d0e:	3a 95       	dec	r19
 d10:	e2 f7       	brpl	.-8      	; 0xd0a <pin_value+0x88>
 d12:	82 2b       	or	r24, r18
 d14:	88 bb       	out	0x18, r24	; 24
 d16:	80 e0       	ldi	r24, 0x00	; 0
 d18:	08 95       	ret
 d1a:	81 11       	cpse	r24, r1
 d1c:	0d c0       	rjmp	.+26     	; 0xd38 <pin_value+0xb6>
 d1e:	25 b3       	in	r18, 0x15	; 21
 d20:	81 e0       	ldi	r24, 0x01	; 1
 d22:	90 e0       	ldi	r25, 0x00	; 0
 d24:	02 c0       	rjmp	.+4      	; 0xd2a <pin_value+0xa8>
 d26:	88 0f       	add	r24, r24
 d28:	99 1f       	adc	r25, r25
 d2a:	3a 95       	dec	r19
 d2c:	e2 f7       	brpl	.-8      	; 0xd26 <pin_value+0xa4>
 d2e:	80 95       	com	r24
 d30:	82 23       	and	r24, r18
 d32:	85 bb       	out	0x15, r24	; 21
 d34:	80 e0       	ldi	r24, 0x00	; 0
 d36:	08 95       	ret
 d38:	25 b3       	in	r18, 0x15	; 21
 d3a:	81 e0       	ldi	r24, 0x01	; 1
 d3c:	90 e0       	ldi	r25, 0x00	; 0
 d3e:	02 c0       	rjmp	.+4      	; 0xd44 <pin_value+0xc2>
 d40:	88 0f       	add	r24, r24
 d42:	99 1f       	adc	r25, r25
 d44:	3a 95       	dec	r19
 d46:	e2 f7       	brpl	.-8      	; 0xd40 <pin_value+0xbe>
 d48:	82 2b       	or	r24, r18
 d4a:	85 bb       	out	0x15, r24	; 21
 d4c:	80 e0       	ldi	r24, 0x00	; 0
 d4e:	08 95       	ret
 d50:	81 11       	cpse	r24, r1
 d52:	0d c0       	rjmp	.+26     	; 0xd6e <pin_value+0xec>
 d54:	22 b3       	in	r18, 0x12	; 18
 d56:	81 e0       	ldi	r24, 0x01	; 1
 d58:	90 e0       	ldi	r25, 0x00	; 0
 d5a:	02 c0       	rjmp	.+4      	; 0xd60 <pin_value+0xde>
 d5c:	88 0f       	add	r24, r24
 d5e:	99 1f       	adc	r25, r25
 d60:	3a 95       	dec	r19
 d62:	e2 f7       	brpl	.-8      	; 0xd5c <pin_value+0xda>
 d64:	80 95       	com	r24
 d66:	82 23       	and	r24, r18
 d68:	82 bb       	out	0x12, r24	; 18
 d6a:	80 e0       	ldi	r24, 0x00	; 0
 d6c:	08 95       	ret
 d6e:	22 b3       	in	r18, 0x12	; 18
 d70:	81 e0       	ldi	r24, 0x01	; 1
 d72:	90 e0       	ldi	r25, 0x00	; 0
 d74:	02 c0       	rjmp	.+4      	; 0xd7a <pin_value+0xf8>
 d76:	88 0f       	add	r24, r24
 d78:	99 1f       	adc	r25, r25
 d7a:	3a 95       	dec	r19
 d7c:	e2 f7       	brpl	.-8      	; 0xd76 <pin_value+0xf4>
 d7e:	82 2b       	or	r24, r18
 d80:	82 bb       	out	0x12, r24	; 18
 d82:	80 e0       	ldi	r24, 0x00	; 0
 d84:	08 95       	ret
 d86:	81 e0       	ldi	r24, 0x01	; 1
 d88:	08 95       	ret
 d8a:	81 e0       	ldi	r24, 0x01	; 1
 d8c:	08 95       	ret
 d8e:	81 e0       	ldi	r24, 0x01	; 1
 d90:	08 95       	ret
 d92:	80 e0       	ldi	r24, 0x00	; 0
 d94:	08 95       	ret

Disassembly of section .text.pin_get_value:

00000e68 <pin_get_value>:

//3.pin
tenumFncErrorState pin_get_value(DIO_PIN* pstructcpy_pin,pu8 pu8cpy_pin_value)
{
 e68:	fc 01       	movw	r30, r24
	if(pu8cpy_pin_value==NULL)
 e6a:	61 15       	cp	r22, r1
 e6c:	71 05       	cpc	r23, r1
 e6e:	09 f4       	brne	.+2      	; 0xe72 <pin_get_value+0xa>
 e70:	48 c0       	rjmp	.+144    	; 0xf02 <pin_get_value+0x9a>
	{
		return LSTY_NULL_POINTER;
	}
	else if (pstructcpy_pin->enumport <MDIO_PORTA || pstructcpy_pin->enumport >MDIO_PORTD 
 e72:	91 81       	ldd	r25, Z+1	; 0x01
 e74:	94 30       	cpi	r25, 0x04	; 4
 e76:	08 f0       	brcs	.+2      	; 0xe7a <pin_get_value+0x12>
 e78:	46 c0       	rjmp	.+140    	; 0xf06 <pin_get_value+0x9e>
	|| pstructcpy_pin->enumpin <MDIO_PIN0 || pstructcpy_pin->enumpin >MDIO_PIN7)
 e7a:	80 81       	ld	r24, Z
 e7c:	88 30       	cpi	r24, 0x08	; 8
 e7e:	08 f0       	brcs	.+2      	; 0xe82 <pin_get_value+0x1a>
 e80:	44 c0       	rjmp	.+136    	; 0xf0a <pin_get_value+0xa2>
	{
		return LSTY_OUT_OF_RANGE;
	}
	else
	{
		switch(pstructcpy_pin->enumport)
 e82:	91 30       	cpi	r25, 0x01	; 1
 e84:	a1 f0       	breq	.+40     	; 0xeae <pin_get_value+0x46>
 e86:	28 f0       	brcs	.+10     	; 0xe92 <pin_get_value+0x2a>
 e88:	92 30       	cpi	r25, 0x02	; 2
 e8a:	f9 f0       	breq	.+62     	; 0xeca <pin_get_value+0x62>
 e8c:	93 30       	cpi	r25, 0x03	; 3
 e8e:	59 f1       	breq	.+86     	; 0xee6 <pin_get_value+0x7e>
 e90:	3e c0       	rjmp	.+124    	; 0xf0e <pin_get_value+0xa6>
		{
		case MDIO_PORTA:
		*pu8cpy_pin_value=GET_BIT(PINA_REGISTER,pstructcpy_pin->enumpin);
 e92:	29 b3       	in	r18, 0x19	; 25
 e94:	30 e0       	ldi	r19, 0x00	; 0
 e96:	a9 01       	movw	r20, r18
 e98:	02 c0       	rjmp	.+4      	; 0xe9e <pin_get_value+0x36>
 e9a:	55 95       	asr	r21
 e9c:	47 95       	ror	r20
 e9e:	8a 95       	dec	r24
 ea0:	e2 f7       	brpl	.-8      	; 0xe9a <pin_get_value+0x32>
 ea2:	ca 01       	movw	r24, r20
 ea4:	81 70       	andi	r24, 0x01	; 1
 ea6:	fb 01       	movw	r30, r22
 ea8:	80 83       	st	Z, r24
		case MDIO_PORTD:
		*pu8cpy_pin_value=GET_BIT(PIND_REGISTER,pstructcpy_pin->enumpin);
		break;					
		}
	}
	return LSTY_EXECUTED_SUCCESSFULLY;
 eaa:	80 e0       	ldi	r24, 0x00	; 0
		switch(pstructcpy_pin->enumport)
		{
		case MDIO_PORTA:
		*pu8cpy_pin_value=GET_BIT(PINA_REGISTER,pstructcpy_pin->enumpin);
		
		break;
 eac:	08 95       	ret
		
		case MDIO_PORTB:
		*pu8cpy_pin_value=GET_BIT(PINB_REGISTER,pstructcpy_pin->enumpin);
 eae:	26 b3       	in	r18, 0x16	; 22
 eb0:	30 e0       	ldi	r19, 0x00	; 0
 eb2:	a9 01       	movw	r20, r18
 eb4:	02 c0       	rjmp	.+4      	; 0xeba <pin_get_value+0x52>
 eb6:	55 95       	asr	r21
 eb8:	47 95       	ror	r20
 eba:	8a 95       	dec	r24
 ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <pin_get_value+0x4e>
 ebe:	ca 01       	movw	r24, r20
 ec0:	81 70       	andi	r24, 0x01	; 1
 ec2:	fb 01       	movw	r30, r22
 ec4:	80 83       	st	Z, r24
		case MDIO_PORTD:
		*pu8cpy_pin_value=GET_BIT(PIND_REGISTER,pstructcpy_pin->enumpin);
		break;					
		}
	}
	return LSTY_EXECUTED_SUCCESSFULLY;
 ec6:	80 e0       	ldi	r24, 0x00	; 0
		
		break;
		
		case MDIO_PORTB:
		*pu8cpy_pin_value=GET_BIT(PINB_REGISTER,pstructcpy_pin->enumpin);
		break;
 ec8:	08 95       	ret
		
		case MDIO_PORTC:
		*pu8cpy_pin_value=GET_BIT(PINC_REGISTER,pstructcpy_pin->enumpin);
 eca:	23 b3       	in	r18, 0x13	; 19
 ecc:	30 e0       	ldi	r19, 0x00	; 0
 ece:	a9 01       	movw	r20, r18
 ed0:	02 c0       	rjmp	.+4      	; 0xed6 <pin_get_value+0x6e>
 ed2:	55 95       	asr	r21
 ed4:	47 95       	ror	r20
 ed6:	8a 95       	dec	r24
 ed8:	e2 f7       	brpl	.-8      	; 0xed2 <pin_get_value+0x6a>
 eda:	ca 01       	movw	r24, r20
 edc:	81 70       	andi	r24, 0x01	; 1
 ede:	fb 01       	movw	r30, r22
 ee0:	80 83       	st	Z, r24
		case MDIO_PORTD:
		*pu8cpy_pin_value=GET_BIT(PIND_REGISTER,pstructcpy_pin->enumpin);
		break;					
		}
	}
	return LSTY_EXECUTED_SUCCESSFULLY;
 ee2:	80 e0       	ldi	r24, 0x00	; 0
		*pu8cpy_pin_value=GET_BIT(PINB_REGISTER,pstructcpy_pin->enumpin);
		break;
		
		case MDIO_PORTC:
		*pu8cpy_pin_value=GET_BIT(PINC_REGISTER,pstructcpy_pin->enumpin);
		break;
 ee4:	08 95       	ret
		
		case MDIO_PORTD:
		*pu8cpy_pin_value=GET_BIT(PIND_REGISTER,pstructcpy_pin->enumpin);
 ee6:	20 b3       	in	r18, 0x10	; 16
 ee8:	30 e0       	ldi	r19, 0x00	; 0
 eea:	a9 01       	movw	r20, r18
 eec:	02 c0       	rjmp	.+4      	; 0xef2 <pin_get_value+0x8a>
 eee:	55 95       	asr	r21
 ef0:	47 95       	ror	r20
 ef2:	8a 95       	dec	r24
 ef4:	e2 f7       	brpl	.-8      	; 0xeee <pin_get_value+0x86>
 ef6:	ca 01       	movw	r24, r20
 ef8:	81 70       	andi	r24, 0x01	; 1
 efa:	fb 01       	movw	r30, r22
 efc:	80 83       	st	Z, r24
		break;					
		}
	}
	return LSTY_EXECUTED_SUCCESSFULLY;
 efe:	80 e0       	ldi	r24, 0x00	; 0
		*pu8cpy_pin_value=GET_BIT(PINC_REGISTER,pstructcpy_pin->enumpin);
		break;
		
		case MDIO_PORTD:
		*pu8cpy_pin_value=GET_BIT(PIND_REGISTER,pstructcpy_pin->enumpin);
		break;					
 f00:	08 95       	ret
//3.pin
tenumFncErrorState pin_get_value(DIO_PIN* pstructcpy_pin,pu8 pu8cpy_pin_value)
{
	if(pu8cpy_pin_value==NULL)
	{
		return LSTY_NULL_POINTER;
 f02:	82 e0       	ldi	r24, 0x02	; 2
 f04:	08 95       	ret
	}
	else if (pstructcpy_pin->enumport <MDIO_PORTA || pstructcpy_pin->enumport >MDIO_PORTD 
	|| pstructcpy_pin->enumpin <MDIO_PIN0 || pstructcpy_pin->enumpin >MDIO_PIN7)
	{
		return LSTY_OUT_OF_RANGE;
 f06:	81 e0       	ldi	r24, 0x01	; 1
 f08:	08 95       	ret
 f0a:	81 e0       	ldi	r24, 0x01	; 1
 f0c:	08 95       	ret
		case MDIO_PORTD:
		*pu8cpy_pin_value=GET_BIT(PIND_REGISTER,pstructcpy_pin->enumpin);
		break;					
		}
	}
	return LSTY_EXECUTED_SUCCESSFULLY;
 f0e:	80 e0       	ldi	r24, 0x00	; 0
}
 f10:	08 95       	ret

Disassembly of section .text.EEPROM_WRITE_BYTE:

000013d8 <EEPROM_WRITE_BYTE>:

//functions implementation
tenumFncErrorState EEPROM_WRITE_BYTE(u8 data,u16 address_in_eeprom)
{
	tenumFncErrorState error=LSTY_EXECUTED_SUCCESSFULLY;
	if (address_in_eeprom>1024)
    13d8:	61 30       	cpi	r22, 0x01	; 1
    13da:	94 e0       	ldi	r25, 0x04	; 4
    13dc:	79 07       	cpc	r23, r25
    13de:	68 f4       	brcc	.+26     	; 0x13fa <EEPROM_WRITE_BYTE+0x22>
	{
		error=LSTY_OUT_OF_RANGE;
	}
	else
	{
	while((GET_BIT(EECR,EEWE)));
    13e0:	e1 99       	sbic	0x1c, 1	; 28
    13e2:	fe cf       	rjmp	.-4      	; 0x13e0 <EEPROM_WRITE_BYTE+0x8>

	EEAR=address_in_eeprom;
    13e4:	7f bb       	out	0x1f, r23	; 31
    13e6:	6e bb       	out	0x1e, r22	; 30
	EEDR=data;
    13e8:	8d bb       	out	0x1d, r24	; 29

	SET_BIT(EECR,EEMWE);
    13ea:	8c b3       	in	r24, 0x1c	; 28
    13ec:	84 60       	ori	r24, 0x04	; 4
    13ee:	8c bb       	out	0x1c, r24	; 28

	SET_BIT(EECR,EEWE);	
    13f0:	8c b3       	in	r24, 0x1c	; 28
    13f2:	82 60       	ori	r24, 0x02	; 2
    13f4:	8c bb       	out	0x1c, r24	; 28
#include "MEEPROM_INTERFACE.h"

//functions implementation
tenumFncErrorState EEPROM_WRITE_BYTE(u8 data,u16 address_in_eeprom)
{
	tenumFncErrorState error=LSTY_EXECUTED_SUCCESSFULLY;
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	08 95       	ret
	if (address_in_eeprom>1024)
	{
		error=LSTY_OUT_OF_RANGE;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
	SET_BIT(EECR,EEWE);	
	}
	return error;
	

}
    13fc:	08 95       	ret

Disassembly of section .text.EEPROM_READ_BYTE_MEEPROM:

00001352 <EEPROM_READ_BYTE_MEEPROM>:


tenumFncErrorState EEPROM_READ_BYTE_MEEPROM(u16 address_in_eeprom,pu8 pu8_byte_read)
{
	tenumFncErrorState error=LSTY_EXECUTED_SUCCESSFULLY;
	if (NULL==pu8_byte_read)
    1352:	61 15       	cp	r22, r1
    1354:	71 05       	cpc	r23, r1
    1356:	81 f0       	breq	.+32     	; 0x1378 <EEPROM_READ_BYTE_MEEPROM+0x26>
	{
		error=LSTY_NULL_POINTER;
	}
	else if(address_in_eeprom>1024) 
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	24 e0       	ldi	r18, 0x04	; 4
    135c:	92 07       	cpc	r25, r18
    135e:	70 f4       	brcc	.+28     	; 0x137c <EEPROM_READ_BYTE_MEEPROM+0x2a>
		error=LSTY_OUT_OF_RANGE;
	}
	else
	{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
    1360:	e1 99       	sbic	0x1c, 1	; 28
    1362:	fe cf       	rjmp	.-4      	; 0x1360 <EEPROM_READ_BYTE_MEEPROM+0xe>
	/* Set up address register */
	EEAR = address_in_eeprom;
    1364:	9f bb       	out	0x1f, r25	; 31
    1366:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	SET_BIT(EECR,EERE);
    1368:	8c b3       	in	r24, 0x1c	; 28
    136a:	81 60       	ori	r24, 0x01	; 1
    136c:	8c bb       	out	0x1c, r24	; 28
	/* Return data from data register */
	*pu8_byte_read=EEDR	;
    136e:	8d b3       	in	r24, 0x1d	; 29
    1370:	fb 01       	movw	r30, r22
    1372:	80 83       	st	Z, r24
}


tenumFncErrorState EEPROM_READ_BYTE_MEEPROM(u16 address_in_eeprom,pu8 pu8_byte_read)
{
	tenumFncErrorState error=LSTY_EXECUTED_SUCCESSFULLY;
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	08 95       	ret
	if (NULL==pu8_byte_read)
	{
		error=LSTY_NULL_POINTER;
    1378:	82 e0       	ldi	r24, 0x02	; 2
    137a:	08 95       	ret
	}
	else if(address_in_eeprom>1024) 
	{
		error=LSTY_OUT_OF_RANGE;
    137c:	81 e0       	ldi	r24, 0x01	; 1
	/* Return data from data register */
	*pu8_byte_read=EEDR	;
	}
	return error;
	
    137e:	08 95       	ret

Disassembly of section .text.__vector_1:

000011a8 <__vector_1>:



//isr functions to be called using pointer to function in main.c
ISR(INT0_vect)
{
    11a8:	1f 92       	push	r1
    11aa:	0f 92       	push	r0
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	0f 92       	push	r0
    11b0:	11 24       	eor	r1, r1
    11b2:	2f 93       	push	r18
    11b4:	3f 93       	push	r19
    11b6:	4f 93       	push	r20
    11b8:	5f 93       	push	r21
    11ba:	6f 93       	push	r22
    11bc:	7f 93       	push	r23
    11be:	8f 93       	push	r24
    11c0:	9f 93       	push	r25
    11c2:	af 93       	push	r26
    11c4:	bf 93       	push	r27
    11c6:	ef 93       	push	r30
    11c8:	ff 93       	push	r31
	EXINT_CALLBACK[0]();
    11ca:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <EXINT_CALLBACK>
    11ce:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <EXINT_CALLBACK+0x1>
    11d2:	09 95       	icall
}
    11d4:	ff 91       	pop	r31
    11d6:	ef 91       	pop	r30
    11d8:	bf 91       	pop	r27
    11da:	af 91       	pop	r26
    11dc:	9f 91       	pop	r25
    11de:	8f 91       	pop	r24
    11e0:	7f 91       	pop	r23
    11e2:	6f 91       	pop	r22
    11e4:	5f 91       	pop	r21
    11e6:	4f 91       	pop	r20
    11e8:	3f 91       	pop	r19
    11ea:	2f 91       	pop	r18
    11ec:	0f 90       	pop	r0
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	0f 90       	pop	r0
    11f2:	1f 90       	pop	r1
    11f4:	18 95       	reti

Disassembly of section .text.__vector_2:

000011f6 <__vector_2>:


ISR(INT1_vect)
{
    11f6:	1f 92       	push	r1
    11f8:	0f 92       	push	r0
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	0f 92       	push	r0
    11fe:	11 24       	eor	r1, r1
    1200:	2f 93       	push	r18
    1202:	3f 93       	push	r19
    1204:	4f 93       	push	r20
    1206:	5f 93       	push	r21
    1208:	6f 93       	push	r22
    120a:	7f 93       	push	r23
    120c:	8f 93       	push	r24
    120e:	9f 93       	push	r25
    1210:	af 93       	push	r26
    1212:	bf 93       	push	r27
    1214:	ef 93       	push	r30
    1216:	ff 93       	push	r31
	EXINT_CALLBACK[1]();
    1218:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <EXINT_CALLBACK+0x2>
    121c:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <EXINT_CALLBACK+0x3>
    1220:	09 95       	icall
}
    1222:	ff 91       	pop	r31
    1224:	ef 91       	pop	r30
    1226:	bf 91       	pop	r27
    1228:	af 91       	pop	r26
    122a:	9f 91       	pop	r25
    122c:	8f 91       	pop	r24
    122e:	7f 91       	pop	r23
    1230:	6f 91       	pop	r22
    1232:	5f 91       	pop	r21
    1234:	4f 91       	pop	r20
    1236:	3f 91       	pop	r19
    1238:	2f 91       	pop	r18
    123a:	0f 90       	pop	r0
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	0f 90       	pop	r0
    1240:	1f 90       	pop	r1
    1242:	18 95       	reti

Disassembly of section .text.__vector_3:

00001244 <__vector_3>:

ISR(INT2_vect)
{
    1244:	1f 92       	push	r1
    1246:	0f 92       	push	r0
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	0f 92       	push	r0
    124c:	11 24       	eor	r1, r1
    124e:	2f 93       	push	r18
    1250:	3f 93       	push	r19
    1252:	4f 93       	push	r20
    1254:	5f 93       	push	r21
    1256:	6f 93       	push	r22
    1258:	7f 93       	push	r23
    125a:	8f 93       	push	r24
    125c:	9f 93       	push	r25
    125e:	af 93       	push	r26
    1260:	bf 93       	push	r27
    1262:	ef 93       	push	r30
    1264:	ff 93       	push	r31
	EXINT_CALLBACK[2]();
    1266:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <EXINT_CALLBACK+0x4>
    126a:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <EXINT_CALLBACK+0x5>
    126e:	09 95       	icall
}
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	0f 90       	pop	r0
    128e:	1f 90       	pop	r1
    1290:	18 95       	reti

Disassembly of section .text.spi_master_init:

00000fac <spi_master_init>:
	
	//When this bit is written to one, SCK is high when idle.
	SET_BIT(SPCR,CPOL); //leading edge is falling edge
	SET_BIT(SPCR,CPHA); //reads on leading edge
	return error;
}
     fac:	cf 93       	push	r28
     fae:	c1 e0       	ldi	r28, 0x01	; 1
     fb0:	c0 93 30 01 	sts	0x0130, r28	; 0x800130 <MOSI_PIN+0x2>
     fb4:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <SCK_PIN+0x2>
     fb8:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <MISO_PIN+0x2>
     fbc:	8e e2       	ldi	r24, 0x2E	; 46
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
     fc4:	8a e2       	ldi	r24, 0x2A	; 42
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
     fcc:	86 e2       	ldi	r24, 0x26	; 38
     fce:	91 e0       	ldi	r25, 0x01	; 1
     fd0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
     fd4:	e2 e3       	ldi	r30, 0x32	; 50
     fd6:	f1 e0       	ldi	r31, 0x01	; 1
     fd8:	c2 83       	std	Z+2, r28	; 0x02
     fda:	c3 83       	std	Z+3, r28	; 0x03
     fdc:	cf 01       	movw	r24, r30
     fde:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pin_direction>
     fe2:	82 e3       	ldi	r24, 0x32	; 50
     fe4:	91 e0       	ldi	r25, 0x01	; 1
     fe6:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
     fea:	8d b1       	in	r24, 0x0d	; 13
     fec:	80 64       	ori	r24, 0x40	; 64
     fee:	8d b9       	out	0x0d, r24	; 13
     ff0:	8d b1       	in	r24, 0x0d	; 13
     ff2:	8f 7d       	andi	r24, 0xDF	; 223
     ff4:	8d b9       	out	0x0d, r24	; 13
     ff6:	8d b1       	in	r24, 0x0d	; 13
     ff8:	80 61       	ori	r24, 0x10	; 16
     ffa:	8d b9       	out	0x0d, r24	; 13
     ffc:	8d b1       	in	r24, 0x0d	; 13
     ffe:	88 60       	ori	r24, 0x08	; 8
    1000:	8d b9       	out	0x0d, r24	; 13
    1002:	8d b1       	in	r24, 0x0d	; 13
    1004:	84 60       	ori	r24, 0x04	; 4
    1006:	8d b9       	out	0x0d, r24	; 13
    1008:	8d b1       	in	r24, 0x0d	; 13
    100a:	81 60       	ori	r24, 0x01	; 1
    100c:	8d b9       	out	0x0d, r24	; 13
    100e:	8d b1       	in	r24, 0x0d	; 13
    1010:	8d 7f       	andi	r24, 0xFD	; 253
    1012:	8d b9       	out	0x0d, r24	; 13
    1014:	8e b1       	in	r24, 0x0e	; 14
    1016:	81 60       	ori	r24, 0x01	; 1
    1018:	8e b9       	out	0x0e, r24	; 14
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	cf 91       	pop	r28
    101e:	08 95       	ret

Disassembly of section .text.spi_master_transmit_byte:

000013ae <spi_master_transmit_byte>:
/*..................*/

tenumFncErrorState spi_master_transmit_byte(u8 data)
{
    13ae:	cf 93       	push	r28
    13b0:	c8 2f       	mov	r28, r24
	tenumFncErrorState error=LSTY_EXECUTED_SUCCESSFULLY;
	//ss  low
	SS_PIN.enumoutputlevel=MDIO_LOW;
    13b2:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <SS_PIN+0x3>
	pin_value(&SS_PIN);
    13b6:	82 e3       	ldi	r24, 0x32	; 50
    13b8:	91 e0       	ldi	r25, 0x01	; 1
    13ba:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
	
	/* Start transmission */
	SPDR=data;
    13be:	cf b9       	out	0x0f, r28	; 15
	
	/* Wait for transmission complete */
	while (!(GET_BIT(SPSR,SPIF)));
    13c0:	77 9b       	sbis	0x0e, 7	; 14
    13c2:	fe cf       	rjmp	.-4      	; 0x13c0 <spi_master_transmit_byte+0x12>
	
	//ss  high again
	SS_PIN.enumoutputlevel=MDIO_HIGH;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <SS_PIN+0x3>
	pin_value(&SS_PIN);
    13ca:	82 e3       	ldi	r24, 0x32	; 50
    13cc:	91 e0       	ldi	r25, 0x01	; 1
    13ce:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
	return error;
}
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	cf 91       	pop	r28
    13d6:	08 95       	ret

Disassembly of section .text.spi_master_receive_byte:

00001318 <spi_master_receive_byte>:
	
	//When this bit is written to one, SCK is high when idle.
	SET_BIT(SPCR,CPOL); //leading edge is falling edge
	SET_BIT(SPCR,CPHA); //reads on leading edge
	return error;
}
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	a9 f0       	breq	.+42     	; 0x134a <spi_master_receive_byte+0x32>
    1320:	ec 01       	movw	r28, r24
    1322:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <SS_PIN+0x3>
    1326:	82 e3       	ldi	r24, 0x32	; 50
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
    132e:	1f b8       	out	0x0f, r1	; 15
    1330:	77 9b       	sbis	0x0e, 7	; 14
    1332:	fe cf       	rjmp	.-4      	; 0x1330 <spi_master_receive_byte+0x18>
    1334:	8f b1       	in	r24, 0x0f	; 15
    1336:	88 83       	st	Y, r24
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <SS_PIN+0x3>
    133e:	82 e3       	ldi	r24, 0x32	; 50
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	0e 94 41 06 	call	0xc82	; 0xc82 <pin_value>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	01 c0       	rjmp	.+2      	; 0x134c <spi_master_receive_byte+0x34>
    134a:	82 e0       	ldi	r24, 0x02	; 2
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	08 95       	ret

Disassembly of section .text.__vector_11:

00001380 <__vector_11>:
}



ISR(TIMER0_OVF_vect)
{
    1380:	1f 92       	push	r1
    1382:	0f 92       	push	r0
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	0f 92       	push	r0
    1388:	11 24       	eor	r1, r1
    138a:	8f 93       	push	r24
    138c:	9f 93       	push	r25
	u16counter_of_ovf_timer0++;	
    138e:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <u16counter_of_ovf_timer0>
    1392:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <u16counter_of_ovf_timer0+0x1>
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <u16counter_of_ovf_timer0+0x1>
    139c:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <u16counter_of_ovf_timer0>
}
    13a0:	9f 91       	pop	r25
    13a2:	8f 91       	pop	r24
    13a4:	0f 90       	pop	r0
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	0f 90       	pop	r0
    13aa:	1f 90       	pop	r1
    13ac:	18 95       	reti

Disassembly of section .text.__vector_7:

000010f8 <__vector_7>:
	{
		timer1_ctc_int=ptr;	
	}
	return error;

}
    10f8:	1f 92       	push	r1
    10fa:	0f 92       	push	r0
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	0f 92       	push	r0
    1100:	11 24       	eor	r1, r1
    1102:	2f 93       	push	r18
    1104:	3f 93       	push	r19
    1106:	4f 93       	push	r20
    1108:	5f 93       	push	r21
    110a:	6f 93       	push	r22
    110c:	7f 93       	push	r23
    110e:	8f 93       	push	r24
    1110:	9f 93       	push	r25
    1112:	af 93       	push	r26
    1114:	bf 93       	push	r27
    1116:	ef 93       	push	r30
    1118:	ff 93       	push	r31
    111a:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <x>
    111e:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <x+0x1>
    1122:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <x+0x2>
    1126:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <x+0x3>
    112a:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <timer1_ctc_int>
    112e:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <timer1_ctc_int+0x1>
    1132:	09 95       	icall
    1134:	ff 91       	pop	r31
    1136:	ef 91       	pop	r30
    1138:	bf 91       	pop	r27
    113a:	af 91       	pop	r26
    113c:	9f 91       	pop	r25
    113e:	8f 91       	pop	r24
    1140:	7f 91       	pop	r23
    1142:	6f 91       	pop	r22
    1144:	5f 91       	pop	r21
    1146:	4f 91       	pop	r20
    1148:	3f 91       	pop	r19
    114a:	2f 91       	pop	r18
    114c:	0f 90       	pop	r0
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	0f 90       	pop	r0
    1152:	1f 90       	pop	r1
    1154:	18 95       	reti

Disassembly of section .text.libgcc:

00001422 <__tablejump2__>:
    1422:	ee 0f       	add	r30, r30
    1424:	ff 1f       	adc	r31, r31
    1426:	05 90       	lpm	r0, Z+
    1428:	f4 91       	lpm	r31, Z
    142a:	e0 2d       	mov	r30, r0
    142c:	09 94       	ijmp

Disassembly of section .text.__dummy_fini:

00001436 <_fini>:
    1436:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00001438 <__funcs_on_exit>:
    1438:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000143a <__simulator_exit>:
    143a:	08 95       	ret

Disassembly of section .text.exit:

000013fe <exit>:
    13fe:	ec 01       	movw	r28, r24
    1400:	0e 94 1c 0a 	call	0x1438	; 0x1438 <__funcs_on_exit>
    1404:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_fini>
    1408:	ce 01       	movw	r24, r28
    140a:	0e 94 1d 0a 	call	0x143a	; 0x143a <__simulator_exit>
    140e:	ce 01       	movw	r24, r28
    1410:	0e 94 19 0a 	call	0x1432	; 0x1432 <_Exit>

Disassembly of section .text._Exit:

00001432 <_Exit>:
    1432:	0e 94 72 00 	call	0xe4	; 0xe4 <_exit>
