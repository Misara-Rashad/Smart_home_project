
SMART_HOME_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000c0c  2**0
                  ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000c0c  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000001c  00000000  00000000  00000c3b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00000c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005989  00000000  00000000  00000edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001057  00000000  00000000  00006868  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b85  00000000  00000000  000078bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c4  00000000  00000000  00009444  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e4  00000000  00000000  00009b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ae1  00000000  00000000  00009eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000b9cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000a9a  00000a9a  00000bae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000bbd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .data.HLCD_arrayoflcds 0000002d  00800062  00000aac  00000bc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 16 .text.voidLCDwrite_data_HLCD 0000023c  000000d6  000000d6  000001ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.voidinitlcd_HLCD 00000178  000004c2  000004c2  000005d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .data.HLED_arrayofleds 0000000f  0080008f  00000ad9  00000bed  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 19 .text.voidinitLED_HLED 0000002a  00000a2a  00000a2a  00000b3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.voidledon_HLED 0000000e  00000a6a  00000a6a  00000b7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.voidledoff_HLED 0000000e  00000a78  00000a78  00000b8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.main    000001b0  00000312  00000312  00000426  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .bss.data_to_master 00000001  008000ba  008000ba  00000c0c  2**0
                  ALLOC
 24 .bss.data_from_master 00000001  008000bb  008000bb  00000c0c  2**0
                  ALLOC
 25 .bss.x        00000004  008000a4  008000a4  00000c0c  2**0
                  ALLOC
 26 .text.enumpindirection_MDIO 00000114  0000063a  0000063a  0000074e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.enumpinvalue_MDIO 00000114  0000074e  0000074e  00000862  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__vector_1 0000004e  00000912  00000912  00000a26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_2 0000004e  00000960  00000960  00000a74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_3 0000004e  000009ae  000009ae  00000ac2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .bss.EXINT_CALLBACK 00000006  0080009e  0080009e  00000c0c  2**0
                  ALLOC
 32 .text.voidinitspi_slave_MSPI 00000052  000008c0  000008c0  000009d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.voidspi_slave_transmit_byte_MSPI 00000004  00000a9e  00000a9e  00000bb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.u8spi_slave_receive_byte_MSPI 00000008  00000a92  00000a92  00000ba6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .data.SCK_PIN 00000004  008000a8  00000ae8  00000bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 36 .data.MISO_PIN 00000004  008000ac  00000aec  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 37 .data.MOSI_PIN 00000004  008000b0  00000af0  00000c04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 38 .data.SS_PIN  00000004  008000b4  00000af4  00000c08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 39 .text.__vector_11 0000002e  000009fc  000009fc  00000b10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__vector_7 0000005e  00000862  00000862  00000976  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .bss.u16counter_of_ovf_timer0 00000002  008000b8  008000b8  00000c0c  2**0
                  ALLOC
 42 .text.libgcc  0000000c  00000a86  00000a86  00000b9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.__dummy_fini 00000002  00000aa6  00000aa6  00000bba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.__dummy_funcs_on_exit 00000002  00000aa8  00000aa8  00000bbc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.__dummy_simulator_exit 00000002  00000aaa  00000aaa  00000bbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.exit    00000016  00000a54  00000a54  00000b68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text._Exit   00000004  00000aa2  00000aa2  00000bb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 89 04 	jmp	0x912	; 0x912 <__vector_1>
   8:	0c 94 b0 04 	jmp	0x960	; 0x960 <__vector_2>
   c:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__vector_3>
  10:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__bad_interrupt>
  14:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__bad_interrupt>
  18:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__bad_interrupt>
  1c:	0c 94 31 04 	jmp	0x862	; 0x862 <__vector_7>
  20:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__bad_interrupt>
  24:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__bad_interrupt>
  28:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__bad_interrupt>
  2c:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__vector_11>
  30:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__bad_interrupt>
  34:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__bad_interrupt>
  38:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__bad_interrupt>
  3c:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__bad_interrupt>
  40:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__bad_interrupt>
  44:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__bad_interrupt>
  48:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__bad_interrupt>
  4c:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__bad_interrupt>
  50:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__bad_interrupt>
  54:	b1 01       	movw	r22, r2
  56:	c1 01       	movw	r24, r2
  58:	e1 01       	movw	r28, r2
  5a:	01 02       	muls	r16, r17
  5c:	21 02       	muls	r18, r17
  5e:	31 02       	muls	r19, r17
  60:	41 02       	muls	r20, r17
  62:	51 02       	muls	r21, r17

00000064 <.dinit>:
  64:	00 60       	ori	r16, 0x00	; 0
  66:	00 62       	ori	r16, 0x20	; 32
  68:	80 00       	.word	0x0080	; ????
  6a:	62 00       	.word	0x0062	; ????
  6c:	9e 00       	.word	0x009e	; ????
  6e:	0a ac       	ldd	r0, Y+58	; 0x3a
  70:	00 9e       	mul	r0, r16
  72:	00 a8       	ldd	r0, Z+48	; 0x30
  74:	80 00       	.word	0x0080	; ????
  76:	a8 00       	.word	0x00a8	; ????
  78:	b8 00       	.word	0x00b8	; ????
  7a:	0a e8       	ldi	r16, 0x8A	; 138
  7c:	00 b8       	out	0x00, r0	; 0
  7e:	00 bc       	out	0x20, r0	; 32
  80:	80 00       	.word	0x0080	; ????

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf e5       	ldi	r28, 0x5F	; 95
  88:	d8 e0       	ldi	r29, 0x08	; 8
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	e4 e6       	ldi	r30, 0x64	; 100
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	17 c0       	rjmp	.+46     	; 0xc4 <__do_clear_bss+0x8>
  96:	b5 91       	lpm	r27, Z+
  98:	a5 91       	lpm	r26, Z+
  9a:	35 91       	lpm	r19, Z+
  9c:	25 91       	lpm	r18, Z+
  9e:	05 91       	lpm	r16, Z+
  a0:	07 fd       	sbrc	r16, 7
  a2:	0c c0       	rjmp	.+24     	; 0xbc <__do_clear_bss>
  a4:	95 91       	lpm	r25, Z+
  a6:	85 91       	lpm	r24, Z+
  a8:	ef 01       	movw	r28, r30
  aa:	f9 2f       	mov	r31, r25
  ac:	e8 2f       	mov	r30, r24
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a2 17       	cp	r26, r18
  b4:	b3 07       	cpc	r27, r19
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0x20>
  b8:	fe 01       	movw	r30, r28
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <__do_clear_bss+0x8>

000000bc <__do_clear_bss>:
  bc:	1d 92       	st	X+, r1
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	e1 f7       	brne	.-8      	; 0xbc <__do_clear_bss>
  c4:	e1 38       	cpi	r30, 0x81	; 129
  c6:	f4 07       	cpc	r31, r20
  c8:	31 f7       	brne	.-52     	; 0x96 <__do_copy_data+0x8>
  ca:	0e 94 89 01 	call	0x312	; 0x312 <main>
  ce:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <exit>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>

Disassembly of section .text:

00000a9a <__bad_interrupt>:
 a9a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.voidLCDwrite_data_HLCD:

000000d6 <voidLCDwrite_data_HLCD>:
	
}


void voidLCDwrite_data_HLCD(HLCD_DATA_TYPE enumcpy_data_type,u8 u8Cpy_LCDData, u8 u8Cpy_LCDNumber)
{
  d6:	6f 92       	push	r6
  d8:	7f 92       	push	r7
  da:	8f 92       	push	r8
  dc:	9f 92       	push	r9
  de:	af 92       	push	r10
  e0:	bf 92       	push	r11
  e2:	cf 92       	push	r12
  e4:	df 92       	push	r13
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
	
Register reglocal_data;

if ((u8Cpy_LCDData>=0 && u8Cpy_LCDNumber<NUM_OF_LCDS))
  f2:	41 11       	cpse	r20, r1
  f4:	ff c0       	rjmp	.+510    	; 0x2f4 <voidLCDwrite_data_HLCD+0x21e>
{
	if(enumcpy_data_type==COMMAND)
  f6:	81 11       	cpse	r24, r1
  f8:	08 c0       	rjmp	.+16     	; 0x10a <voidLCDwrite_data_HLCD+0x34>
		{
		HLCD_arrayoflcds[u8Cpy_LCDNumber].RS.enumoutputlevel=MDIO_LOW;
  fa:	8d e2       	ldi	r24, 0x2D	; 45
  fc:	48 9f       	mul	r20, r24
  fe:	f0 01       	movw	r30, r0
 100:	11 24       	eor	r1, r1
 102:	ee 59       	subi	r30, 0x9E	; 158
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	13 a2       	std	Z+35, r1	; 0x23
 108:	09 c0       	rjmp	.+18     	; 0x11c <voidLCDwrite_data_HLCD+0x46>
		}
	
	else if((enumcpy_data_type==DATA))
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	39 f4       	brne	.+14     	; 0x11c <voidLCDwrite_data_HLCD+0x46>
		{
		HLCD_arrayoflcds[u8Cpy_LCDNumber].RS.enumoutputlevel=MDIO_HIGH;
 10e:	9d e2       	ldi	r25, 0x2D	; 45
 110:	49 9f       	mul	r20, r25
 112:	f0 01       	movw	r30, r0
 114:	11 24       	eor	r1, r1
 116:	ee 59       	subi	r30, 0x9E	; 158
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	83 a3       	std	Z+35, r24	; 0x23
 11c:	76 2e       	mov	r7, r22
		}
	
	HLCD_arrayoflcds[u8Cpy_LCDNumber].RW.enumoutputlevel=MDIO_LOW;
 11e:	c4 2f       	mov	r28, r20
 120:	d0 e0       	ldi	r29, 0x00	; 0
 122:	8d e2       	ldi	r24, 0x2D	; 45
 124:	8c 9f       	mul	r24, r28
 126:	80 01       	movw	r16, r0
 128:	8d 9f       	mul	r24, r29
 12a:	10 0d       	add	r17, r0
 12c:	11 24       	eor	r1, r1
 12e:	f8 01       	movw	r30, r16
 130:	ee 59       	subi	r30, 0x9E	; 158
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	7f 01       	movw	r14, r30
 136:	17 a2       	std	Z+39, r1	; 0x27
	enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].RS);
 138:	c8 01       	movw	r24, r16
 13a:	8e 57       	subi	r24, 0x7E	; 126
 13c:	9f 4f       	sbci	r25, 0xFF	; 255
 13e:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
	enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].RW);
 142:	c8 01       	movw	r24, r16
 144:	8a 57       	subi	r24, 0x7A	; 122
 146:	9f 4f       	sbci	r25, 0xFF	; 255
 148:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
	
	
	
	if((HLCD_arrayoflcds[u8Cpy_LCDNumber].enummode==four_BIT_MODE))
 14c:	f7 01       	movw	r30, r14
 14e:	84 a5       	ldd	r24, Z+44	; 0x2c
 150:	81 11       	cpse	r24, r1
 152:	6e c0       	rjmp	.+220    	; 0x230 <voidLCDwrite_data_HLCD+0x15a>
		{
		reglocal_data.Byte=u8Cpy_LCDData & (0xf0);
 154:	87 2d       	mov	r24, r7
 156:	80 7f       	andi	r24, 0xF0	; 240
		//taking most significant 4 bits first
		HLCD_arrayoflcds[u8Cpy_LCDNumber].D4.enumoutputlevel =reglocal_data.Bit.B4;
 158:	84 fb       	bst	r24, 4
 15a:	99 27       	eor	r25, r25
 15c:	90 f9       	bld	r25, 0
 15e:	e7 01       	movw	r28, r14
 160:	93 8b       	std	Z+19, r25	; 0x13
		HLCD_arrayoflcds[u8Cpy_LCDNumber].D5.enumoutputlevel =reglocal_data.Bit.B5;
 162:	85 fb       	bst	r24, 5
 164:	99 27       	eor	r25, r25
 166:	90 f9       	bld	r25, 0
 168:	97 8b       	std	Z+23, r25	; 0x17
		HLCD_arrayoflcds[u8Cpy_LCDNumber].D6.enumoutputlevel =reglocal_data.Bit.B6;
 16a:	86 fb       	bst	r24, 6
 16c:	99 27       	eor	r25, r25
 16e:	90 f9       	bld	r25, 0
 170:	93 8f       	std	Z+27, r25	; 0x1b
		HLCD_arrayoflcds[u8Cpy_LCDNumber].D7.enumoutputlevel =reglocal_data.Bit.B7;
 172:	87 fb       	bst	r24, 7
 174:	88 27       	eor	r24, r24
 176:	80 f9       	bld	r24, 0
 178:	87 8f       	std	Z+31, r24	; 0x1f
		
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].D4);
 17a:	c8 01       	movw	r24, r16
 17c:	8e 58       	subi	r24, 0x8E	; 142
 17e:	9f 4f       	sbci	r25, 0xFF	; 255
 180:	5c 01       	movw	r10, r24
 182:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].D5);
 186:	f8 01       	movw	r30, r16
 188:	ea 58       	subi	r30, 0x8A	; 138
 18a:	ff 4f       	sbci	r31, 0xFF	; 255
 18c:	6f 01       	movw	r12, r30
 18e:	cf 01       	movw	r24, r30
 190:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].D6);
 194:	c8 01       	movw	r24, r16
 196:	86 58       	subi	r24, 0x86	; 134
 198:	9f 4f       	sbci	r25, 0xFF	; 255
 19a:	7c 01       	movw	r14, r24
 19c:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].D7);
 1a0:	f8 01       	movw	r30, r16
 1a2:	e2 58       	subi	r30, 0x82	; 130
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	4f 01       	movw	r8, r30
 1a8:	cf 01       	movw	r24, r30
 1aa:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
		
		
		//enable pin high for 10ms then low before sending least 4 significant bits(generate a falling edge) 
		HLCD_arrayoflcds[u8Cpy_LCDNumber].ENABLE.enumoutputlevel=MDIO_HIGH;
 1ae:	66 24       	eor	r6, r6
 1b0:	63 94       	inc	r6
 1b2:	6b a6       	std	Y+43, r6	; 0x2b
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].ENABLE);
 1b4:	06 57       	subi	r16, 0x76	; 118
 1b6:	1f 4f       	sbci	r17, 0xFF	; 255
 1b8:	c8 01       	movw	r24, r16
 1ba:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	8f e3       	ldi	r24, 0x3F	; 63
 1c0:	9c e9       	ldi	r25, 0x9C	; 156
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <voidLCDwrite_data_HLCD+0xec>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <voidLCDwrite_data_HLCD+0xf2>
 1c8:	00 00       	nop
		_delay_ms(10);
		HLCD_arrayoflcds[u8Cpy_LCDNumber].ENABLE.enumoutputlevel=MDIO_LOW;
 1ca:	1b a6       	std	Y+43, r1	; 0x2b
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].ENABLE);
 1cc:	c8 01       	movw	r24, r16
 1ce:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>

		reglocal_data.Byte=u8Cpy_LCDData<<4;
 1d2:	77 0c       	add	r7, r7
 1d4:	77 0c       	add	r7, r7
 1d6:	77 0c       	add	r7, r7
 1d8:	77 0c       	add	r7, r7
		//taking least significant 4 bits first
		HLCD_arrayoflcds[u8Cpy_LCDNumber].D4.enumoutputlevel =reglocal_data.Bit.B4;
 1da:	74 fa       	bst	r7, 4
 1dc:	88 27       	eor	r24, r24
 1de:	80 f9       	bld	r24, 0
 1e0:	8b 8b       	std	Y+19, r24	; 0x13
		HLCD_arrayoflcds[u8Cpy_LCDNumber].D5.enumoutputlevel =reglocal_data.Bit.B5;
 1e2:	75 fa       	bst	r7, 5
 1e4:	88 27       	eor	r24, r24
 1e6:	80 f9       	bld	r24, 0
 1e8:	8f 8b       	std	Y+23, r24	; 0x17
		HLCD_arrayoflcds[u8Cpy_LCDNumber].D6.enumoutputlevel =reglocal_data.Bit.B6;
 1ea:	76 fa       	bst	r7, 6
 1ec:	88 27       	eor	r24, r24
 1ee:	80 f9       	bld	r24, 0
 1f0:	8b 8f       	std	Y+27, r24	; 0x1b
		HLCD_arrayoflcds[u8Cpy_LCDNumber].D7.enumoutputlevel =reglocal_data.Bit.B7;
 1f2:	77 fa       	bst	r7, 7
 1f4:	77 24       	eor	r7, r7
 1f6:	70 f8       	bld	r7, 0
 1f8:	7f 8e       	std	Y+31, r7	; 0x1f
		
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].D4);
 1fa:	c5 01       	movw	r24, r10
 1fc:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].D5);
 200:	c6 01       	movw	r24, r12
 202:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].D6);
 206:	c7 01       	movw	r24, r14
 208:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].D7);
 20c:	c4 01       	movw	r24, r8
 20e:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
		
		//enable pin high for 10ms then low after sending least 4 significant bits
		HLCD_arrayoflcds[u8Cpy_LCDNumber].ENABLE.enumoutputlevel=MDIO_HIGH;
 212:	6b a6       	std	Y+43, r6	; 0x2b
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].ENABLE);
 214:	c8 01       	movw	r24, r16
 216:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
 21a:	ef e3       	ldi	r30, 0x3F	; 63
 21c:	fc e9       	ldi	r31, 0x9C	; 156
 21e:	31 97       	sbiw	r30, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <voidLCDwrite_data_HLCD+0x148>
 222:	00 c0       	rjmp	.+0      	; 0x224 <voidLCDwrite_data_HLCD+0x14e>
 224:	00 00       	nop
		_delay_ms(10);
		HLCD_arrayoflcds[u8Cpy_LCDNumber].ENABLE.enumoutputlevel=MDIO_LOW;
 226:	1b a6       	std	Y+43, r1	; 0x2b
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].ENABLE);
 228:	c8 01       	movw	r24, r16
 22a:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
 22e:	62 c0       	rjmp	.+196    	; 0x2f4 <voidLCDwrite_data_HLCD+0x21e>

		}
	
	else if((HLCD_arrayoflcds[u8Cpy_LCDNumber].enummode==EIGHT_BIT_MODE)) //8 bit mode
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	09 f0       	breq	.+2      	; 0x236 <voidLCDwrite_data_HLCD+0x160>
 234:	5f c0       	rjmp	.+190    	; 0x2f4 <voidLCDwrite_data_HLCD+0x21e>
		{
		reglocal_data.Byte=u8Cpy_LCDData;
		HLCD_arrayoflcds[u8Cpy_LCDNumber].D0.enumoutputlevel=reglocal_data.Bit.B0;
 236:	87 2d       	mov	r24, r7
 238:	81 70       	andi	r24, 0x01	; 1
 23a:	9d e2       	ldi	r25, 0x2D	; 45
 23c:	9c 9f       	mul	r25, r28
 23e:	80 01       	movw	r16, r0
 240:	9d 9f       	mul	r25, r29
 242:	10 0d       	add	r17, r0
 244:	11 24       	eor	r1, r1
 246:	e8 01       	movw	r28, r16
 248:	ce 59       	subi	r28, 0x9E	; 158
 24a:	df 4f       	sbci	r29, 0xFF	; 255
 24c:	8b 83       	std	Y+3, r24	; 0x03
		HLCD_arrayoflcds[u8Cpy_LCDNumber].D1.enumoutputlevel=reglocal_data.Bit.B1;
 24e:	71 fa       	bst	r7, 1
 250:	88 27       	eor	r24, r24
 252:	80 f9       	bld	r24, 0
 254:	8f 83       	std	Y+7, r24	; 0x07
		HLCD_arrayoflcds[u8Cpy_LCDNumber].D2.enumoutputlevel=reglocal_data.Bit.B2;
 256:	72 fa       	bst	r7, 2
 258:	88 27       	eor	r24, r24
 25a:	80 f9       	bld	r24, 0
 25c:	8b 87       	std	Y+11, r24	; 0x0b
		HLCD_arrayoflcds[u8Cpy_LCDNumber].D3.enumoutputlevel=reglocal_data.Bit.B3;
 25e:	73 fa       	bst	r7, 3
 260:	88 27       	eor	r24, r24
 262:	80 f9       	bld	r24, 0
 264:	8f 87       	std	Y+15, r24	; 0x0f
		HLCD_arrayoflcds[u8Cpy_LCDNumber].D4.enumoutputlevel=reglocal_data.Bit.B4;
 266:	74 fa       	bst	r7, 4
 268:	88 27       	eor	r24, r24
 26a:	80 f9       	bld	r24, 0
 26c:	8b 8b       	std	Y+19, r24	; 0x13
		HLCD_arrayoflcds[u8Cpy_LCDNumber].D5.enumoutputlevel=reglocal_data.Bit.B5;
 26e:	75 fa       	bst	r7, 5
 270:	88 27       	eor	r24, r24
 272:	80 f9       	bld	r24, 0
 274:	8f 8b       	std	Y+23, r24	; 0x17
		HLCD_arrayoflcds[u8Cpy_LCDNumber].D6.enumoutputlevel=reglocal_data.Bit.B6;
 276:	76 fa       	bst	r7, 6
 278:	88 27       	eor	r24, r24
 27a:	80 f9       	bld	r24, 0
 27c:	8b 8f       	std	Y+27, r24	; 0x1b
		HLCD_arrayoflcds[u8Cpy_LCDNumber].D7.enumoutputlevel=reglocal_data.Bit.B7;
 27e:	77 fa       	bst	r7, 7
 280:	77 24       	eor	r7, r7
 282:	70 f8       	bld	r7, 0
 284:	7f 8e       	std	Y+31, r7	; 0x1f

		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].D0);
 286:	ce 01       	movw	r24, r28
 288:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].D1);
 28c:	c8 01       	movw	r24, r16
 28e:	8a 59       	subi	r24, 0x9A	; 154
 290:	9f 4f       	sbci	r25, 0xFF	; 255
 292:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].D2);
 296:	c8 01       	movw	r24, r16
 298:	86 59       	subi	r24, 0x96	; 150
 29a:	9f 4f       	sbci	r25, 0xFF	; 255
 29c:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].D3);
 2a0:	c8 01       	movw	r24, r16
 2a2:	82 59       	subi	r24, 0x92	; 146
 2a4:	9f 4f       	sbci	r25, 0xFF	; 255
 2a6:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].D4);
 2aa:	c8 01       	movw	r24, r16
 2ac:	8e 58       	subi	r24, 0x8E	; 142
 2ae:	9f 4f       	sbci	r25, 0xFF	; 255
 2b0:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].D5);
 2b4:	c8 01       	movw	r24, r16
 2b6:	8a 58       	subi	r24, 0x8A	; 138
 2b8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ba:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].D6);
 2be:	c8 01       	movw	r24, r16
 2c0:	86 58       	subi	r24, 0x86	; 134
 2c2:	9f 4f       	sbci	r25, 0xFF	; 255
 2c4:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].D7);
 2c8:	c8 01       	movw	r24, r16
 2ca:	82 58       	subi	r24, 0x82	; 130
 2cc:	9f 4f       	sbci	r25, 0xFF	; 255
 2ce:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>

		//enable pin high for 10ms then low after sending the 8 bits
		HLCD_arrayoflcds[u8Cpy_LCDNumber].ENABLE.enumoutputlevel=MDIO_HIGH;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	8b a7       	std	Y+43, r24	; 0x2b
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].ENABLE);
 2d6:	06 57       	subi	r16, 0x76	; 118
 2d8:	1f 4f       	sbci	r17, 0xFF	; 255
 2da:	c8 01       	movw	r24, r16
 2dc:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
 2e0:	8f e3       	ldi	r24, 0x3F	; 63
 2e2:	9c e9       	ldi	r25, 0x9C	; 156
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <voidLCDwrite_data_HLCD+0x20e>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <voidLCDwrite_data_HLCD+0x214>
 2ea:	00 00       	nop
		_delay_ms(10);
		HLCD_arrayoflcds[u8Cpy_LCDNumber].ENABLE.enumoutputlevel=MDIO_LOW;
 2ec:	1b a6       	std	Y+43, r1	; 0x2b
		enumpinvalue_MDIO(&HLCD_arrayoflcds[u8Cpy_LCDNumber].ENABLE);
 2ee:	c8 01       	movw	r24, r16
 2f0:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>

}

	

}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	ff 90       	pop	r15
 2fe:	ef 90       	pop	r14
 300:	df 90       	pop	r13
 302:	cf 90       	pop	r12
 304:	bf 90       	pop	r11
 306:	af 90       	pop	r10
 308:	9f 90       	pop	r9
 30a:	8f 90       	pop	r8
 30c:	7f 90       	pop	r7
 30e:	6f 90       	pop	r6
 310:	08 95       	ret

Disassembly of section .text.voidinitlcd_HLCD:

000004c2 <voidinitlcd_HLCD>:
#include "HLCD_CONFIG.h"
#include "HLCD_INTERFACE.h"


void voidinitlcd_HLCD(void)
{	
 4c2:	ef 92       	push	r14
 4c4:	ff 92       	push	r15
 4c6:	0f 93       	push	r16
 4c8:	1f 93       	push	r17
 4ca:	cf 93       	push	r28
	u8 u8local_no_of_lcds=0;
 4cc:	c0 e0       	ldi	r28, 0x00	; 0
	for(u8local_no_of_lcds;u8local_no_of_lcds < NUM_OF_LCDS;u8local_no_of_lcds++)
 4ce:	ac c0       	rjmp	.+344    	; 0x628 <voidinitlcd_HLCD+0x166>
	{
		
		enumpindirection_MDIO(&HLCD_arrayoflcds[u8local_no_of_lcds].RS);
 4d0:	ec 2e       	mov	r14, r28
 4d2:	f1 2c       	mov	r15, r1
 4d4:	8d e2       	ldi	r24, 0x2D	; 45
 4d6:	8e 9d       	mul	r24, r14
 4d8:	80 01       	movw	r16, r0
 4da:	8f 9d       	mul	r24, r15
 4dc:	10 0d       	add	r17, r0
 4de:	11 24       	eor	r1, r1
 4e0:	c8 01       	movw	r24, r16
 4e2:	8e 57       	subi	r24, 0x7E	; 126
 4e4:	9f 4f       	sbci	r25, 0xFF	; 255
 4e6:	0e 94 1d 03 	call	0x63a	; 0x63a <enumpindirection_MDIO>
		enumpindirection_MDIO(&HLCD_arrayoflcds[u8local_no_of_lcds].RW);
 4ea:	c8 01       	movw	r24, r16
 4ec:	8a 57       	subi	r24, 0x7A	; 122
 4ee:	9f 4f       	sbci	r25, 0xFF	; 255
 4f0:	0e 94 1d 03 	call	0x63a	; 0x63a <enumpindirection_MDIO>
		enumpindirection_MDIO(&HLCD_arrayoflcds[u8local_no_of_lcds].ENABLE);
 4f4:	c8 01       	movw	r24, r16
 4f6:	86 57       	subi	r24, 0x76	; 118
 4f8:	9f 4f       	sbci	r25, 0xFF	; 255
 4fa:	0e 94 1d 03 	call	0x63a	; 0x63a <enumpindirection_MDIO>
		
		
		if ((HLCD_arrayoflcds[u8local_no_of_lcds].enummode==EIGHT_BIT_MODE))
 4fe:	f8 01       	movw	r30, r16
 500:	ee 59       	subi	r30, 0x9E	; 158
 502:	ff 4f       	sbci	r31, 0xFF	; 255
 504:	84 a5       	ldd	r24, Z+44	; 0x2c
 506:	81 30       	cpi	r24, 0x01	; 1
 508:	39 f5       	brne	.+78     	; 0x558 <voidinitlcd_HLCD+0x96>
		{
				enumpindirection_MDIO(&HLCD_arrayoflcds[u8local_no_of_lcds].D0);
 50a:	cf 01       	movw	r24, r30
 50c:	0e 94 1d 03 	call	0x63a	; 0x63a <enumpindirection_MDIO>
				enumpindirection_MDIO(&HLCD_arrayoflcds[u8local_no_of_lcds].D1);
 510:	c8 01       	movw	r24, r16
 512:	8a 59       	subi	r24, 0x9A	; 154
 514:	9f 4f       	sbci	r25, 0xFF	; 255
 516:	0e 94 1d 03 	call	0x63a	; 0x63a <enumpindirection_MDIO>
				enumpindirection_MDIO(&HLCD_arrayoflcds[u8local_no_of_lcds].D2);
 51a:	c8 01       	movw	r24, r16
 51c:	86 59       	subi	r24, 0x96	; 150
 51e:	9f 4f       	sbci	r25, 0xFF	; 255
 520:	0e 94 1d 03 	call	0x63a	; 0x63a <enumpindirection_MDIO>
				enumpindirection_MDIO(&HLCD_arrayoflcds[u8local_no_of_lcds].D3);
 524:	c8 01       	movw	r24, r16
 526:	82 59       	subi	r24, 0x92	; 146
 528:	9f 4f       	sbci	r25, 0xFF	; 255
 52a:	0e 94 1d 03 	call	0x63a	; 0x63a <enumpindirection_MDIO>
				
				enumpindirection_MDIO(&HLCD_arrayoflcds[u8local_no_of_lcds].D4);
 52e:	c8 01       	movw	r24, r16
 530:	8e 58       	subi	r24, 0x8E	; 142
 532:	9f 4f       	sbci	r25, 0xFF	; 255
 534:	0e 94 1d 03 	call	0x63a	; 0x63a <enumpindirection_MDIO>
				enumpindirection_MDIO(&HLCD_arrayoflcds[u8local_no_of_lcds].D5);
 538:	c8 01       	movw	r24, r16
 53a:	8a 58       	subi	r24, 0x8A	; 138
 53c:	9f 4f       	sbci	r25, 0xFF	; 255
 53e:	0e 94 1d 03 	call	0x63a	; 0x63a <enumpindirection_MDIO>
				enumpindirection_MDIO(&HLCD_arrayoflcds[u8local_no_of_lcds].D6);
 542:	c8 01       	movw	r24, r16
 544:	86 58       	subi	r24, 0x86	; 134
 546:	9f 4f       	sbci	r25, 0xFF	; 255
 548:	0e 94 1d 03 	call	0x63a	; 0x63a <enumpindirection_MDIO>
				enumpindirection_MDIO(&HLCD_arrayoflcds[u8local_no_of_lcds].D7);
 54c:	c8 01       	movw	r24, r16
 54e:	82 58       	subi	r24, 0x82	; 130
 550:	9f 4f       	sbci	r25, 0xFF	; 255
 552:	0e 94 1d 03 	call	0x63a	; 0x63a <enumpindirection_MDIO>
 556:	1c c0       	rjmp	.+56     	; 0x590 <voidinitlcd_HLCD+0xce>
		}
		
		else if((HLCD_arrayoflcds[u8local_no_of_lcds].enummode==four_BIT_MODE)) //4bit_mode
 558:	81 11       	cpse	r24, r1
 55a:	1a c0       	rjmp	.+52     	; 0x590 <voidinitlcd_HLCD+0xce>
		{
				enumpindirection_MDIO(&HLCD_arrayoflcds[u8local_no_of_lcds].D4);
 55c:	8d e2       	ldi	r24, 0x2D	; 45
 55e:	8e 9d       	mul	r24, r14
 560:	80 01       	movw	r16, r0
 562:	8f 9d       	mul	r24, r15
 564:	10 0d       	add	r17, r0
 566:	11 24       	eor	r1, r1
 568:	c8 01       	movw	r24, r16
 56a:	8e 58       	subi	r24, 0x8E	; 142
 56c:	9f 4f       	sbci	r25, 0xFF	; 255
 56e:	0e 94 1d 03 	call	0x63a	; 0x63a <enumpindirection_MDIO>
				enumpindirection_MDIO(&HLCD_arrayoflcds[u8local_no_of_lcds].D5);
 572:	c8 01       	movw	r24, r16
 574:	8a 58       	subi	r24, 0x8A	; 138
 576:	9f 4f       	sbci	r25, 0xFF	; 255
 578:	0e 94 1d 03 	call	0x63a	; 0x63a <enumpindirection_MDIO>
				enumpindirection_MDIO(&HLCD_arrayoflcds[u8local_no_of_lcds].D6);
 57c:	c8 01       	movw	r24, r16
 57e:	86 58       	subi	r24, 0x86	; 134
 580:	9f 4f       	sbci	r25, 0xFF	; 255
 582:	0e 94 1d 03 	call	0x63a	; 0x63a <enumpindirection_MDIO>
				enumpindirection_MDIO(&HLCD_arrayoflcds[u8local_no_of_lcds].D7);	
 586:	c8 01       	movw	r24, r16
 588:	82 58       	subi	r24, 0x82	; 130
 58a:	9f 4f       	sbci	r25, 0xFF	; 255
 58c:	0e 94 1d 03 	call	0x63a	; 0x63a <enumpindirection_MDIO>
 590:	2f ef       	ldi	r18, 0xFF	; 255
 592:	86 e7       	ldi	r24, 0x76	; 118
 594:	91 e0       	ldi	r25, 0x01	; 1
 596:	21 50       	subi	r18, 0x01	; 1
 598:	80 40       	sbci	r24, 0x00	; 0
 59a:	90 40       	sbci	r25, 0x00	; 0
 59c:	e1 f7       	brne	.-8      	; 0x596 <voidinitlcd_HLCD+0xd4>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <voidinitlcd_HLCD+0xde>
 5a0:	00 00       	nop
		}
		
			_delay_ms(30); //delay after LCD power on 
			
			
		if ((HLCD_arrayoflcds[u8local_no_of_lcds].enummode==EIGHT_BIT_MODE))
 5a2:	8d e2       	ldi	r24, 0x2D	; 45
 5a4:	8e 9d       	mul	r24, r14
 5a6:	f0 01       	movw	r30, r0
 5a8:	8f 9d       	mul	r24, r15
 5aa:	f0 0d       	add	r31, r0
 5ac:	11 24       	eor	r1, r1
 5ae:	ee 59       	subi	r30, 0x9E	; 158
 5b0:	ff 4f       	sbci	r31, 0xFF	; 255
 5b2:	84 a5       	ldd	r24, Z+44	; 0x2c
 5b4:	81 30       	cpi	r24, 0x01	; 1
 5b6:	31 f4       	brne	.+12     	; 0x5c4 <voidinitlcd_HLCD+0x102>
		{
				voidLCDwrite_data_HLCD(COMMAND,FUNCTION_SET,u8local_no_of_lcds);	//0x38	
 5b8:	4c 2f       	mov	r20, r28
 5ba:	68 e3       	ldi	r22, 0x38	; 56
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	0e 94 6b 00 	call	0xd6	; 0xd6 <__data_load_end>
 5c2:	10 c0       	rjmp	.+32     	; 0x5e4 <voidinitlcd_HLCD+0x122>
		}
		
		else if((HLCD_arrayoflcds[u8local_no_of_lcds].enummode==four_BIT_MODE)) //4bit_mode
 5c4:	81 11       	cpse	r24, r1
 5c6:	0e c0       	rjmp	.+28     	; 0x5e4 <voidinitlcd_HLCD+0x122>
		{
			//functions set
		voidLCDwrite_data_HLCD(COMMAND,LCD_4BitMode1,u8local_no_of_lcds); //0x33
 5c8:	4c 2f       	mov	r20, r28
 5ca:	63 e3       	ldi	r22, 0x33	; 51
 5cc:	0e 94 6b 00 	call	0xd6	; 0xd6 <__data_load_end>
		voidLCDwrite_data_HLCD(COMMAND,LCD_4BitMode2,u8local_no_of_lcds);  //0x32
 5d0:	4c 2f       	mov	r20, r28
 5d2:	62 e3       	ldi	r22, 0x32	; 50
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	0e 94 6b 00 	call	0xd6	; 0xd6 <__data_load_end>
		voidLCDwrite_data_HLCD(COMMAND,LCD_2Lines5X8_4BitMode,u8local_no_of_lcds); //0x28
 5da:	4c 2f       	mov	r20, r28
 5dc:	68 e2       	ldi	r22, 0x28	; 40
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	0e 94 6b 00 	call	0xd6	; 0xd6 <__data_load_end>
 5e4:	8f e9       	ldi	r24, 0x9F	; 159
 5e6:	9f e0       	ldi	r25, 0x0F	; 15
 5e8:	01 97       	sbiw	r24, 0x01	; 1
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <voidinitlcd_HLCD+0x126>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <voidinitlcd_HLCD+0x12c>
 5ee:	00 00       	nop
		}	
		
			_delay_ms(1);
			
			//display on\off control
			voidLCDwrite_data_HLCD(COMMAND,0x0F,u8local_no_of_lcds);  
 5f0:	4c 2f       	mov	r20, r28
 5f2:	6f e0       	ldi	r22, 0x0F	; 15
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	0e 94 6b 00 	call	0xd6	; 0xd6 <__data_load_end>
 5fa:	8f e9       	ldi	r24, 0x9F	; 159
 5fc:	9f e0       	ldi	r25, 0x0F	; 15
 5fe:	01 97       	sbiw	r24, 0x01	; 1
 600:	f1 f7       	brne	.-4      	; 0x5fe <voidinitlcd_HLCD+0x13c>
 602:	00 c0       	rjmp	.+0      	; 0x604 <voidinitlcd_HLCD+0x142>
 604:	00 00       	nop
			_delay_ms(1);

			//display clear
			voidLCDwrite_data_HLCD(COMMAND,0x01,u8local_no_of_lcds); 
 606:	4c 2f       	mov	r20, r28
 608:	61 e0       	ldi	r22, 0x01	; 1
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	0e 94 6b 00 	call	0xd6	; 0xd6 <__data_load_end>
 610:	8f e9       	ldi	r24, 0x9F	; 159
 612:	9f e0       	ldi	r25, 0x0F	; 15
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <voidinitlcd_HLCD+0x152>
 618:	00 c0       	rjmp	.+0      	; 0x61a <voidinitlcd_HLCD+0x158>
 61a:	00 00       	nop
			_delay_ms(1);
			
			//entry mode
			voidLCDwrite_data_HLCD(COMMAND,0x06,u8local_no_of_lcds); //entry mode 0b0000 0100
 61c:	4c 2f       	mov	r20, r28
 61e:	66 e0       	ldi	r22, 0x06	; 6
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	0e 94 6b 00 	call	0xd6	; 0xd6 <__data_load_end>


void voidinitlcd_HLCD(void)
{	
	u8 u8local_no_of_lcds=0;
	for(u8local_no_of_lcds;u8local_no_of_lcds < NUM_OF_LCDS;u8local_no_of_lcds++)
 626:	cf 5f       	subi	r28, 0xFF	; 255
 628:	cc 23       	and	r28, r28
 62a:	09 f4       	brne	.+2      	; 0x62e <voidinitlcd_HLCD+0x16c>
 62c:	51 cf       	rjmp	.-350    	; 0x4d0 <voidinitlcd_HLCD+0xe>

	
	}
	
	
}
 62e:	cf 91       	pop	r28
 630:	1f 91       	pop	r17
 632:	0f 91       	pop	r16
 634:	ff 90       	pop	r15
 636:	ef 90       	pop	r14
 638:	08 95       	ret

Disassembly of section .text.voidinitLED_HLED:

00000a2a <voidinitLED_HLED>:
#include "../../MCAL/MTIMER/MPWM/MPWM_INTERFACE.h"


//functions implementation
void voidinitLED_HLED(void)
{	
 a2a:	cf 93       	push	r28
	u8 i;
	for(i=0;i<NUM_OF_LEDS;i++)
 a2c:	c0 e0       	ldi	r28, 0x00	; 0
 a2e:	0e c0       	rjmp	.+28     	; 0xa4c <voidinitLED_HLED+0x22>
	{
			enumpindirection_MDIO(&HLED_arrayofleds[i].structpin);
 a30:	8c 2f       	mov	r24, r28
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	9c 01       	movw	r18, r24
 a36:	22 0f       	add	r18, r18
 a38:	33 1f       	adc	r19, r19
 a3a:	22 0f       	add	r18, r18
 a3c:	33 1f       	adc	r19, r19
 a3e:	82 0f       	add	r24, r18
 a40:	93 1f       	adc	r25, r19
 a42:	81 57       	subi	r24, 0x71	; 113
 a44:	9f 4f       	sbci	r25, 0xFF	; 255
 a46:	0e 94 1d 03 	call	0x63a	; 0x63a <enumpindirection_MDIO>

//functions implementation
void voidinitLED_HLED(void)
{	
	u8 i;
	for(i=0;i<NUM_OF_LEDS;i++)
 a4a:	cf 5f       	subi	r28, 0xFF	; 255
 a4c:	c3 30       	cpi	r28, 0x03	; 3
 a4e:	80 f3       	brcs	.-32     	; 0xa30 <voidinitLED_HLED+0x6>
	{
			enumpindirection_MDIO(&HLED_arrayofleds[i].structpin);
	}
}
 a50:	cf 91       	pop	r28
 a52:	08 95       	ret

Disassembly of section .text.voidledon_HLED:

00000a6a <voidledon_HLED>:


void voidledon_HLED(LED_T* pstructcpy_pin)
{
	if((pstructcpy_pin->enumoutputlevel=ACTIVE_HIGH_LED))
 a6a:	21 e0       	ldi	r18, 0x01	; 1
 a6c:	fc 01       	movw	r30, r24
 a6e:	24 83       	std	Z+4, r18	; 0x04
	{
		pstructcpy_pin->structpin.enumoutputlevel=MDIO_HIGH;
 a70:	23 83       	std	Z+3, r18	; 0x03
		enumpinvalue_MDIO(&pstructcpy_pin->structpin);
 a72:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
 a76:	08 95       	ret

Disassembly of section .text.voidledoff_HLED:

00000a78 <voidledoff_HLED>:
}


void voidledoff_HLED(LED_T* pstructcpy_pin)
{
	if((pstructcpy_pin->enumoutputlevel=ACTIVE_HIGH_LED))
 a78:	21 e0       	ldi	r18, 0x01	; 1
 a7a:	fc 01       	movw	r30, r24
 a7c:	24 83       	std	Z+4, r18	; 0x04
	{
	pstructcpy_pin->structpin.enumoutputlevel=MDIO_LOW;
 a7e:	13 82       	std	Z+3, r1	; 0x03
	enumpinvalue_MDIO(&pstructcpy_pin->structpin);
 a80:	0e 94 a7 03 	call	0x74e	; 0x74e <enumpinvalue_MDIO>
 a84:	08 95       	ret

Disassembly of section .text.main:

00000312 <main>:
//SLAVE CODE
u8 data_from_master=0;
u8 data_to_master=0;
int main(void)
{	
	voidinitLED_HLED();
 312:	0e 94 15 05 	call	0xa2a	; 0xa2a <voidinitLED_HLED>

	voidledon_HLED(&HLED_arrayofleds[0]);		//led1
 316:	8f e8       	ldi	r24, 0x8F	; 143
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 35 05 	call	0xa6a	; 0xa6a <voidledon_HLED>
	
	voidledoff_HLED(&HLED_arrayofleds[1]);		//led2
 31e:	84 e9       	ldi	r24, 0x94	; 148
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 3c 05 	call	0xa78	; 0xa78 <voidledoff_HLED>

	voidledon_HLED(&HLED_arrayofleds[2]);		//led3
 326:	89 e9       	ldi	r24, 0x99	; 153
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 35 05 	call	0xa6a	; 0xa6a <voidledon_HLED>

	voidinitlcd_HLCD();	
 32e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <voidinitlcd_HLCD>
	
	voidinitspi_slave_MSPI();
 332:	0e 94 60 04 	call	0x8c0	; 0x8c0 <voidinitspi_slave_MSPI>
	
	while (1)
	{
		
	data_from_master=u8spi_slave_receive_byte_MSPI();
 336:	0e 94 49 05 	call	0xa92	; 0xa92 <u8spi_slave_receive_byte_MSPI>
 33a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <data_from_master>
	if(data_from_master !=0)
 33e:	88 23       	and	r24, r24
 340:	d1 f3       	breq	.-12     	; 0x336 <main+0x24>
	{
	voidLCDwrite_data_HLCD(DATA,'0'+data_from_master,HLCD_NUM0);
 342:	60 e3       	ldi	r22, 0x30	; 48
 344:	68 0f       	add	r22, r24
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	0e 94 6b 00 	call	0xd6	; 0xd6 <__data_load_end>
	switch(data_from_master)
 34e:	e0 91 bb 00 	lds	r30, 0x00BB	; 0x8000bb <data_from_master>
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	e8 30       	cpi	r30, 0x08	; 8
 356:	f1 05       	cpc	r31, r1
 358:	70 f7       	brcc	.-36     	; 0x336 <main+0x24>
 35a:	e6 5d       	subi	r30, 0xD6	; 214
 35c:	ff 4f       	sbci	r31, 0xFF	; 255
 35e:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__tablejump2__>
		{
			
		case 0:
		//data_to_master=GET_BIT(PORTC_REGISTER,MDIO_PIN2);
		voidspi_slave_transmit_byte_MSPI(data_to_master);
 362:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <data_to_master>
 366:	0e 94 4f 05 	call	0xa9e	; 0xa9e <voidspi_slave_transmit_byte_MSPI>
		data_from_master=0;
 36a:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <data_from_master>
		while (0 == data_from_master)
 36e:	04 c0       	rjmp	.+8      	; 0x378 <main+0x66>
		{
			data_from_master=u8spi_slave_receive_byte_MSPI();
 370:	0e 94 49 05 	call	0xa92	; 0xa92 <u8spi_slave_receive_byte_MSPI>
 374:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <data_from_master>
			
		case 0:
		//data_to_master=GET_BIT(PORTC_REGISTER,MDIO_PIN2);
		voidspi_slave_transmit_byte_MSPI(data_to_master);
		data_from_master=0;
		while (0 == data_from_master)
 378:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <data_from_master>
 37c:	88 23       	and	r24, r24
 37e:	c1 f3       	breq	.-16     	; 0x370 <main+0x5e>
 380:	da cf       	rjmp	.-76     	; 0x336 <main+0x24>
		}
		//(data_from_master-48)>0 ? SET_BIT(PORTC_REGISTER,MDIO_PIN2) : CLR_BIT(PORTC_REGISTER,MDIO_PIN2) ;
		break;
					
		case 1:
		data_to_master=GET_BIT(PORTC_REGISTER,MDIO_PIN2);
 382:	85 b3       	in	r24, 0x15	; 21
 384:	82 fb       	bst	r24, 2
 386:	88 27       	eor	r24, r24
 388:	80 f9       	bld	r24, 0
 38a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <data_to_master>
		voidspi_slave_transmit_byte_MSPI(data_to_master);
 38e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <voidspi_slave_transmit_byte_MSPI>
		data_from_master=0;
 392:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <data_from_master>
		while (0 == data_from_master)
 396:	04 c0       	rjmp	.+8      	; 0x3a0 <main+0x8e>
		{
			data_from_master=u8spi_slave_receive_byte_MSPI();
 398:	0e 94 49 05 	call	0xa92	; 0xa92 <u8spi_slave_receive_byte_MSPI>
 39c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <data_from_master>
					
		case 1:
		data_to_master=GET_BIT(PORTC_REGISTER,MDIO_PIN2);
		voidspi_slave_transmit_byte_MSPI(data_to_master);
		data_from_master=0;
		while (0 == data_from_master)
 3a0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <data_from_master>
 3a4:	88 23       	and	r24, r24
 3a6:	c1 f3       	breq	.-16     	; 0x398 <main+0x86>
		{
			data_from_master=u8spi_slave_receive_byte_MSPI();
		}
		(data_from_master-48)>0 ? SET_BIT(PORTC_REGISTER,MDIO_PIN2) : CLR_BIT(PORTC_REGISTER,MDIO_PIN2) ;
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	c0 97       	sbiw	r24, 0x30	; 48
 3ac:	18 16       	cp	r1, r24
 3ae:	19 06       	cpc	r1, r25
 3b0:	24 f4       	brge	.+8      	; 0x3ba <main+0xa8>
 3b2:	85 b3       	in	r24, 0x15	; 21
 3b4:	84 60       	ori	r24, 0x04	; 4
 3b6:	85 bb       	out	0x15, r24	; 21
 3b8:	be cf       	rjmp	.-132    	; 0x336 <main+0x24>
 3ba:	85 b3       	in	r24, 0x15	; 21
 3bc:	8b 7f       	andi	r24, 0xFB	; 251
 3be:	85 bb       	out	0x15, r24	; 21
 3c0:	ba cf       	rjmp	.-140    	; 0x336 <main+0x24>
		break;
		
		case 2:
		data_to_master=GET_BIT(PORTC_REGISTER,MDIO_PIN7);
 3c2:	85 b3       	in	r24, 0x15	; 21
 3c4:	88 1f       	adc	r24, r24
 3c6:	88 27       	eor	r24, r24
 3c8:	88 1f       	adc	r24, r24
 3ca:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <data_to_master>
		voidspi_slave_transmit_byte_MSPI(data_to_master);
 3ce:	0e 94 4f 05 	call	0xa9e	; 0xa9e <voidspi_slave_transmit_byte_MSPI>
		data_from_master=0;
 3d2:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <data_from_master>
		while (0 == data_from_master)
 3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <main+0xce>
		{
			data_from_master=u8spi_slave_receive_byte_MSPI();
 3d8:	0e 94 49 05 	call	0xa92	; 0xa92 <u8spi_slave_receive_byte_MSPI>
 3dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <data_from_master>
		
		case 2:
		data_to_master=GET_BIT(PORTC_REGISTER,MDIO_PIN7);
		voidspi_slave_transmit_byte_MSPI(data_to_master);
		data_from_master=0;
		while (0 == data_from_master)
 3e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <data_from_master>
 3e4:	88 23       	and	r24, r24
 3e6:	c1 f3       	breq	.-16     	; 0x3d8 <main+0xc6>
		{
			data_from_master=u8spi_slave_receive_byte_MSPI();
		}
		(data_from_master-48)>0 ? SET_BIT(PORTC_REGISTER,MDIO_PIN7) : CLR_BIT(PORTC_REGISTER,MDIO_PIN7) ;
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	c0 97       	sbiw	r24, 0x30	; 48
 3ec:	18 16       	cp	r1, r24
 3ee:	19 06       	cpc	r1, r25
 3f0:	24 f4       	brge	.+8      	; 0x3fa <main+0xe8>
 3f2:	85 b3       	in	r24, 0x15	; 21
 3f4:	80 68       	ori	r24, 0x80	; 128
 3f6:	85 bb       	out	0x15, r24	; 21
 3f8:	9e cf       	rjmp	.-196    	; 0x336 <main+0x24>
 3fa:	85 b3       	in	r24, 0x15	; 21
 3fc:	8f 77       	andi	r24, 0x7F	; 127
 3fe:	85 bb       	out	0x15, r24	; 21
 400:	9a cf       	rjmp	.-204    	; 0x336 <main+0x24>
		break;	
		
		case 3:
		data_to_master=GET_BIT(PORTD_REGISTER,MDIO_PIN3);
 402:	82 b3       	in	r24, 0x12	; 18
 404:	83 fb       	bst	r24, 3
 406:	88 27       	eor	r24, r24
 408:	80 f9       	bld	r24, 0
 40a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <data_to_master>
		voidspi_slave_transmit_byte_MSPI(data_to_master);
 40e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <voidspi_slave_transmit_byte_MSPI>
		data_from_master=0;
 412:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <data_from_master>
		while (0 == data_from_master)
 416:	04 c0       	rjmp	.+8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
		{
			data_from_master=u8spi_slave_receive_byte_MSPI();
 418:	0e 94 49 05 	call	0xa92	; 0xa92 <u8spi_slave_receive_byte_MSPI>
 41c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <data_from_master>
		
		case 3:
		data_to_master=GET_BIT(PORTD_REGISTER,MDIO_PIN3);
		voidspi_slave_transmit_byte_MSPI(data_to_master);
		data_from_master=0;
		while (0 == data_from_master)
 420:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <data_from_master>
 424:	88 23       	and	r24, r24
 426:	c1 f3       	breq	.-16     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		{
			data_from_master=u8spi_slave_receive_byte_MSPI();
		}
		(data_from_master-48)>0 ? SET_BIT(PORTD_REGISTER,MDIO_PIN3) : CLR_BIT(PORTD_REGISTER,MDIO_PIN3) ;
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	c0 97       	sbiw	r24, 0x30	; 48
 42c:	18 16       	cp	r1, r24
 42e:	19 06       	cpc	r1, r25
 430:	24 f4       	brge	.+8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 432:	82 b3       	in	r24, 0x12	; 18
 434:	88 60       	ori	r24, 0x08	; 8
 436:	82 bb       	out	0x12, r24	; 18
 438:	7e cf       	rjmp	.-260    	; 0x336 <main+0x24>
 43a:	82 b3       	in	r24, 0x12	; 18
 43c:	87 7f       	andi	r24, 0xF7	; 247
 43e:	82 bb       	out	0x12, r24	; 18
 440:	7a cf       	rjmp	.-268    	; 0x336 <main+0x24>
		break;
		
		case 4:
		//data_to_master=GET_BIT(PORTD_REGISTER,MDIO_PIN3);
		voidspi_slave_transmit_byte_MSPI(data_to_master);
 442:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <data_to_master>
 446:	0e 94 4f 05 	call	0xa9e	; 0xa9e <voidspi_slave_transmit_byte_MSPI>
		data_from_master=0;
 44a:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <data_from_master>
		while (0 == data_from_master)
 44e:	04 c0       	rjmp	.+8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
		{
			data_from_master=u8spi_slave_receive_byte_MSPI();
 450:	0e 94 49 05 	call	0xa92	; 0xa92 <u8spi_slave_receive_byte_MSPI>
 454:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <data_from_master>
		
		case 4:
		//data_to_master=GET_BIT(PORTD_REGISTER,MDIO_PIN3);
		voidspi_slave_transmit_byte_MSPI(data_to_master);
		data_from_master=0;
		while (0 == data_from_master)
 458:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <data_from_master>
 45c:	88 23       	and	r24, r24
 45e:	c1 f3       	breq	.-16     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 460:	6a cf       	rjmp	.-300    	; 0x336 <main+0x24>
		//(data_from_master-48)>0 ? SET_BIT(PORTD_REGISTER,MDIO_PIN3) : CLR_BIT(PORTD_REGISTER,MDIO_PIN3);		
		break;
		
		case 5:
		//data_to_master=GET_BIT(PORTD_REGISTER,MDIO_PIN3);
		voidspi_slave_transmit_byte_MSPI(data_to_master);
 462:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <data_to_master>
 466:	0e 94 4f 05 	call	0xa9e	; 0xa9e <voidspi_slave_transmit_byte_MSPI>
		data_from_master=0;
 46a:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <data_from_master>
		while (0 == data_from_master)
 46e:	04 c0       	rjmp	.+8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
		{
			data_from_master=u8spi_slave_receive_byte_MSPI();
 470:	0e 94 49 05 	call	0xa92	; 0xa92 <u8spi_slave_receive_byte_MSPI>
 474:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <data_from_master>
		
		case 5:
		//data_to_master=GET_BIT(PORTD_REGISTER,MDIO_PIN3);
		voidspi_slave_transmit_byte_MSPI(data_to_master);
		data_from_master=0;
		while (0 == data_from_master)
 478:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <data_from_master>
 47c:	88 23       	and	r24, r24
 47e:	c1 f3       	breq	.-16     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 480:	5a cf       	rjmp	.-332    	; 0x336 <main+0x24>
		//(data_from_master-48)>0 ? SET_BIT(PORTD_REGISTER,MDIO_PIN3) : CLR_BIT(PORTD_REGISTER,MDIO_PIN3);
		break;
		
		case 6:
		//data_to_master=GET_BIT(PORTD_REGISTER,MDIO_PIN3);
		voidspi_slave_transmit_byte_MSPI(data_to_master);
 482:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <data_to_master>
 486:	0e 94 4f 05 	call	0xa9e	; 0xa9e <voidspi_slave_transmit_byte_MSPI>
		data_from_master=0;
 48a:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <data_from_master>
		while (0 == data_from_master)
 48e:	04 c0       	rjmp	.+8      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
		{
			data_from_master=u8spi_slave_receive_byte_MSPI();
 490:	0e 94 49 05 	call	0xa92	; 0xa92 <u8spi_slave_receive_byte_MSPI>
 494:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <data_from_master>
		
		case 6:
		//data_to_master=GET_BIT(PORTD_REGISTER,MDIO_PIN3);
		voidspi_slave_transmit_byte_MSPI(data_to_master);
		data_from_master=0;
		while (0 == data_from_master)
 498:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <data_from_master>
 49c:	88 23       	and	r24, r24
 49e:	c1 f3       	breq	.-16     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 4a0:	4a cf       	rjmp	.-364    	; 0x336 <main+0x24>
		//(data_from_master-48)>0 ? SET_BIT(PORTD_REGISTER,MDIO_PIN3) : CLR_BIT(PORTD_REGISTER,MDIO_PIN3);
		break;
		
		case 7:
		//data_to_master=GET_BIT(PORTD_REGISTER,MDIO_PIN3);
		voidspi_slave_transmit_byte_MSPI(data_to_master);
 4a2:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <data_to_master>
 4a6:	0e 94 4f 05 	call	0xa9e	; 0xa9e <voidspi_slave_transmit_byte_MSPI>
		data_from_master=0;
 4aa:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <data_from_master>
		while (0 == data_from_master)
 4ae:	04 c0       	rjmp	.+8      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		{
			data_from_master=u8spi_slave_receive_byte_MSPI();
 4b0:	0e 94 49 05 	call	0xa92	; 0xa92 <u8spi_slave_receive_byte_MSPI>
 4b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <data_from_master>
		
		case 7:
		//data_to_master=GET_BIT(PORTD_REGISTER,MDIO_PIN3);
		voidspi_slave_transmit_byte_MSPI(data_to_master);
		data_from_master=0;
		while (0 == data_from_master)
 4b8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <data_from_master>
 4bc:	88 23       	and	r24, r24
 4be:	c1 f3       	breq	.-16     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4c0:	3a cf       	rjmp	.-396    	; 0x336 <main+0x24>

Disassembly of section .text.enumpindirection_MDIO:

0000063a <enumpindirection_MDIO>:
			}
			break;
		}
		return LSTY_EXECUTED_SUCCESSFULLY;
	}
}
 63a:	fc 01       	movw	r30, r24
 63c:	21 81       	ldd	r18, Z+1	; 0x01
 63e:	24 30       	cpi	r18, 0x04	; 4
 640:	08 f0       	brcs	.+2      	; 0x644 <enumpindirection_MDIO+0xa>
 642:	7d c0       	rjmp	.+250    	; 0x73e <enumpindirection_MDIO+0x104>
 644:	30 81       	ld	r19, Z
 646:	38 30       	cpi	r19, 0x08	; 8
 648:	08 f0       	brcs	.+2      	; 0x64c <enumpindirection_MDIO+0x12>
 64a:	7b c0       	rjmp	.+246    	; 0x742 <enumpindirection_MDIO+0x108>
 64c:	82 81       	ldd	r24, Z+2	; 0x02
 64e:	82 30       	cpi	r24, 0x02	; 2
 650:	08 f0       	brcs	.+2      	; 0x654 <enumpindirection_MDIO+0x1a>
 652:	79 c0       	rjmp	.+242    	; 0x746 <enumpindirection_MDIO+0x10c>
 654:	21 30       	cpi	r18, 0x01	; 1
 656:	11 f1       	breq	.+68     	; 0x69c <enumpindirection_MDIO+0x62>
 658:	30 f0       	brcs	.+12     	; 0x666 <enumpindirection_MDIO+0x2c>
 65a:	22 30       	cpi	r18, 0x02	; 2
 65c:	d1 f1       	breq	.+116    	; 0x6d2 <enumpindirection_MDIO+0x98>
 65e:	23 30       	cpi	r18, 0x03	; 3
 660:	09 f4       	brne	.+2      	; 0x664 <enumpindirection_MDIO+0x2a>
 662:	52 c0       	rjmp	.+164    	; 0x708 <enumpindirection_MDIO+0xce>
 664:	72 c0       	rjmp	.+228    	; 0x74a <enumpindirection_MDIO+0x110>
 666:	81 11       	cpse	r24, r1
 668:	0d c0       	rjmp	.+26     	; 0x684 <enumpindirection_MDIO+0x4a>
 66a:	2a b3       	in	r18, 0x1a	; 26
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	02 c0       	rjmp	.+4      	; 0x676 <enumpindirection_MDIO+0x3c>
 672:	88 0f       	add	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	3a 95       	dec	r19
 678:	e2 f7       	brpl	.-8      	; 0x672 <enumpindirection_MDIO+0x38>
 67a:	80 95       	com	r24
 67c:	82 23       	and	r24, r18
 67e:	8a bb       	out	0x1a, r24	; 26
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	08 95       	ret
 684:	2a b3       	in	r18, 0x1a	; 26
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <enumpindirection_MDIO+0x56>
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	3a 95       	dec	r19
 692:	e2 f7       	brpl	.-8      	; 0x68c <enumpindirection_MDIO+0x52>
 694:	82 2b       	or	r24, r18
 696:	8a bb       	out	0x1a, r24	; 26
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	08 95       	ret
 69c:	81 11       	cpse	r24, r1
 69e:	0d c0       	rjmp	.+26     	; 0x6ba <enumpindirection_MDIO+0x80>
 6a0:	27 b3       	in	r18, 0x17	; 23
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <enumpindirection_MDIO+0x72>
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	3a 95       	dec	r19
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <enumpindirection_MDIO+0x6e>
 6b0:	80 95       	com	r24
 6b2:	82 23       	and	r24, r18
 6b4:	87 bb       	out	0x17, r24	; 23
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	08 95       	ret
 6ba:	27 b3       	in	r18, 0x17	; 23
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <enumpindirection_MDIO+0x8c>
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	3a 95       	dec	r19
 6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <enumpindirection_MDIO+0x88>
 6ca:	82 2b       	or	r24, r18
 6cc:	87 bb       	out	0x17, r24	; 23
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	08 95       	ret
 6d2:	81 11       	cpse	r24, r1
 6d4:	0d c0       	rjmp	.+26     	; 0x6f0 <enumpindirection_MDIO+0xb6>
 6d6:	24 b3       	in	r18, 0x14	; 20
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <enumpindirection_MDIO+0xa8>
 6de:	88 0f       	add	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	3a 95       	dec	r19
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <enumpindirection_MDIO+0xa4>
 6e6:	80 95       	com	r24
 6e8:	82 23       	and	r24, r18
 6ea:	84 bb       	out	0x14, r24	; 20
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	08 95       	ret
 6f0:	24 b3       	in	r18, 0x14	; 20
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <enumpindirection_MDIO+0xc2>
 6f8:	88 0f       	add	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	3a 95       	dec	r19
 6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <enumpindirection_MDIO+0xbe>
 700:	82 2b       	or	r24, r18
 702:	84 bb       	out	0x14, r24	; 20
 704:	80 e0       	ldi	r24, 0x00	; 0
 706:	08 95       	ret
 708:	81 11       	cpse	r24, r1
 70a:	0d c0       	rjmp	.+26     	; 0x726 <enumpindirection_MDIO+0xec>
 70c:	21 b3       	in	r18, 0x11	; 17
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	02 c0       	rjmp	.+4      	; 0x718 <enumpindirection_MDIO+0xde>
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	3a 95       	dec	r19
 71a:	e2 f7       	brpl	.-8      	; 0x714 <enumpindirection_MDIO+0xda>
 71c:	80 95       	com	r24
 71e:	82 23       	and	r24, r18
 720:	81 bb       	out	0x11, r24	; 17
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	08 95       	ret
 726:	21 b3       	in	r18, 0x11	; 17
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	02 c0       	rjmp	.+4      	; 0x732 <enumpindirection_MDIO+0xf8>
 72e:	88 0f       	add	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	3a 95       	dec	r19
 734:	e2 f7       	brpl	.-8      	; 0x72e <enumpindirection_MDIO+0xf4>
 736:	82 2b       	or	r24, r18
 738:	81 bb       	out	0x11, r24	; 17
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	08 95       	ret
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	08 95       	ret
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	08 95       	ret
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	08 95       	ret
 74a:	80 e0       	ldi	r24, 0x00	; 0
 74c:	08 95       	ret

Disassembly of section .text.enumpinvalue_MDIO:

0000074e <enumpinvalue_MDIO>:


//3.pin
tenumFncErrorState enumpinvalue_MDIO(DIO_PIN* pstructcpy_pin)
{
	if(pstructcpy_pin->enumport <MDIO_PORTA || pstructcpy_pin->enumport >MDIO_PORTD 
 74e:	fc 01       	movw	r30, r24
 750:	21 81       	ldd	r18, Z+1	; 0x01
 752:	24 30       	cpi	r18, 0x04	; 4
 754:	08 f0       	brcs	.+2      	; 0x758 <enumpinvalue_MDIO+0xa>
 756:	7d c0       	rjmp	.+250    	; 0x852 <__DATA_REGION_LENGTH__+0x52>
	|| pstructcpy_pin->enumpin <MDIO_PIN0 || pstructcpy_pin->enumpin >MDIO_PIN7
 758:	30 81       	ld	r19, Z
	||pstructcpy_pin->enumoutputlevel <MDIO_LOW || pstructcpy_pin->enumoutputlevel >MDIO_HIGH)
 75a:	38 30       	cpi	r19, 0x08	; 8
 75c:	08 f0       	brcs	.+2      	; 0x760 <enumpinvalue_MDIO+0x12>
 75e:	7b c0       	rjmp	.+246    	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 760:	83 81       	ldd	r24, Z+3	; 0x03
 762:	82 30       	cpi	r24, 0x02	; 2
 764:	08 f0       	brcs	.+2      	; 0x768 <enumpinvalue_MDIO+0x1a>
 766:	79 c0       	rjmp	.+242    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>

	}
	
	else
	{
		switch(pstructcpy_pin->enumport)
 768:	21 30       	cpi	r18, 0x01	; 1
 76a:	11 f1       	breq	.+68     	; 0x7b0 <enumpinvalue_MDIO+0x62>
 76c:	30 f0       	brcs	.+12     	; 0x77a <enumpinvalue_MDIO+0x2c>
 76e:	22 30       	cpi	r18, 0x02	; 2
 770:	d1 f1       	breq	.+116    	; 0x7e6 <enumpinvalue_MDIO+0x98>
 772:	23 30       	cpi	r18, 0x03	; 3
 774:	09 f4       	brne	.+2      	; 0x778 <enumpinvalue_MDIO+0x2a>
 776:	52 c0       	rjmp	.+164    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 778:	72 c0       	rjmp	.+228    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
		{
			case MDIO_PORTA:
			if(pstructcpy_pin->enumoutputlevel==MDIO_LOW)
 77a:	81 11       	cpse	r24, r1
 77c:	0d c0       	rjmp	.+26     	; 0x798 <enumpinvalue_MDIO+0x4a>
			{
				CLR_BIT(PORTA_REGISTER,pstructcpy_pin->enumpin);
 77e:	2b b3       	in	r18, 0x1b	; 27
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	02 c0       	rjmp	.+4      	; 0x78a <enumpinvalue_MDIO+0x3c>
 786:	88 0f       	add	r24, r24
 788:	99 1f       	adc	r25, r25
 78a:	3a 95       	dec	r19
 78c:	e2 f7       	brpl	.-8      	; 0x786 <enumpinvalue_MDIO+0x38>
 78e:	80 95       	com	r24
 790:	82 23       	and	r24, r18
 792:	8b bb       	out	0x1b, r24	; 27
			{
				SET_BIT(PORTD_REGISTER,pstructcpy_pin->enumpin);
			}
			break;
		}
		return LSTY_EXECUTED_SUCCESSFULLY;
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	08 95       	ret
			{
				CLR_BIT(PORTA_REGISTER,pstructcpy_pin->enumpin);
			}
			else
			{
				SET_BIT(PORTA_REGISTER,pstructcpy_pin->enumpin);
 798:	2b b3       	in	r18, 0x1b	; 27
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <enumpinvalue_MDIO+0x56>
 7a0:	88 0f       	add	r24, r24
 7a2:	99 1f       	adc	r25, r25
 7a4:	3a 95       	dec	r19
 7a6:	e2 f7       	brpl	.-8      	; 0x7a0 <enumpinvalue_MDIO+0x52>
 7a8:	82 2b       	or	r24, r18
 7aa:	8b bb       	out	0x1b, r24	; 27
			{
				SET_BIT(PORTD_REGISTER,pstructcpy_pin->enumpin);
			}
			break;
		}
		return LSTY_EXECUTED_SUCCESSFULLY;
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	08 95       	ret
				SET_BIT(PORTA_REGISTER,pstructcpy_pin->enumpin);
			}
			break;

			case MDIO_PORTB:
			if(pstructcpy_pin->enumoutputlevel ==MDIO_LOW)
 7b0:	81 11       	cpse	r24, r1
 7b2:	0d c0       	rjmp	.+26     	; 0x7ce <enumpinvalue_MDIO+0x80>
			{
				CLR_BIT(PORTB_REGISTER,pstructcpy_pin->enumpin);
 7b4:	28 b3       	in	r18, 0x18	; 24
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <enumpinvalue_MDIO+0x72>
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	3a 95       	dec	r19
 7c2:	e2 f7       	brpl	.-8      	; 0x7bc <enumpinvalue_MDIO+0x6e>
 7c4:	80 95       	com	r24
 7c6:	82 23       	and	r24, r18
 7c8:	88 bb       	out	0x18, r24	; 24
			{
				SET_BIT(PORTD_REGISTER,pstructcpy_pin->enumpin);
			}
			break;
		}
		return LSTY_EXECUTED_SUCCESSFULLY;
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	08 95       	ret
			{
				CLR_BIT(PORTB_REGISTER,pstructcpy_pin->enumpin);
			}
			else
			{
				SET_BIT(PORTB_REGISTER,pstructcpy_pin->enumpin);
 7ce:	28 b3       	in	r18, 0x18	; 24
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <enumpinvalue_MDIO+0x8c>
 7d6:	88 0f       	add	r24, r24
 7d8:	99 1f       	adc	r25, r25
 7da:	3a 95       	dec	r19
 7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <enumpinvalue_MDIO+0x88>
 7de:	82 2b       	or	r24, r18
 7e0:	88 bb       	out	0x18, r24	; 24
			{
				SET_BIT(PORTD_REGISTER,pstructcpy_pin->enumpin);
			}
			break;
		}
		return LSTY_EXECUTED_SUCCESSFULLY;
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	08 95       	ret
				SET_BIT(PORTB_REGISTER,pstructcpy_pin->enumpin);
			}
			break;

			case MDIO_PORTC:
			if(pstructcpy_pin->enumoutputlevel ==MDIO_LOW)
 7e6:	81 11       	cpse	r24, r1
 7e8:	0d c0       	rjmp	.+26     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
			{
				CLR_BIT(PORTC_REGISTER,pstructcpy_pin->enumpin);
 7ea:	25 b3       	in	r18, 0x15	; 21
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <enumpinvalue_MDIO+0xa8>
 7f2:	88 0f       	add	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	3a 95       	dec	r19
 7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <enumpinvalue_MDIO+0xa4>
 7fa:	80 95       	com	r24
 7fc:	82 23       	and	r24, r18
 7fe:	85 bb       	out	0x15, r24	; 21
			{
				SET_BIT(PORTD_REGISTER,pstructcpy_pin->enumpin);
			}
			break;
		}
		return LSTY_EXECUTED_SUCCESSFULLY;
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	08 95       	ret
			{
				CLR_BIT(PORTC_REGISTER,pstructcpy_pin->enumpin);
			}
			else
			{
				SET_BIT(PORTC_REGISTER,pstructcpy_pin->enumpin);
 804:	25 b3       	in	r18, 0x15	; 21
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	02 c0       	rjmp	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80c:	88 0f       	add	r24, r24
 80e:	99 1f       	adc	r25, r25
 810:	3a 95       	dec	r19
 812:	e2 f7       	brpl	.-8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 814:	82 2b       	or	r24, r18
 816:	85 bb       	out	0x15, r24	; 21
			{
				SET_BIT(PORTD_REGISTER,pstructcpy_pin->enumpin);
			}
			break;
		}
		return LSTY_EXECUTED_SUCCESSFULLY;
 818:	80 e0       	ldi	r24, 0x00	; 0
 81a:	08 95       	ret
				SET_BIT(PORTC_REGISTER,pstructcpy_pin->enumpin);
			}
			break;
			
			case MDIO_PORTD:
			if(pstructcpy_pin->enumoutputlevel ==MDIO_LOW)
 81c:	81 11       	cpse	r24, r1
 81e:	0d c0       	rjmp	.+26     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
			{
				CLR_BIT(PORTD_REGISTER,pstructcpy_pin->enumpin);
 820:	22 b3       	in	r18, 0x12	; 18
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	02 c0       	rjmp	.+4      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 828:	88 0f       	add	r24, r24
 82a:	99 1f       	adc	r25, r25
 82c:	3a 95       	dec	r19
 82e:	e2 f7       	brpl	.-8      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 830:	80 95       	com	r24
 832:	82 23       	and	r24, r18
 834:	82 bb       	out	0x12, r24	; 18
			{
				SET_BIT(PORTD_REGISTER,pstructcpy_pin->enumpin);
			}
			break;
		}
		return LSTY_EXECUTED_SUCCESSFULLY;
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	08 95       	ret
			{
				CLR_BIT(PORTD_REGISTER,pstructcpy_pin->enumpin);
			}
			else
			{
				SET_BIT(PORTD_REGISTER,pstructcpy_pin->enumpin);
 83a:	22 b3       	in	r18, 0x12	; 18
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	02 c0       	rjmp	.+4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 842:	88 0f       	add	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	3a 95       	dec	r19
 848:	e2 f7       	brpl	.-8      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 84a:	82 2b       	or	r24, r18
 84c:	82 bb       	out	0x12, r24	; 18
			}
			break;
		}
		return LSTY_EXECUTED_SUCCESSFULLY;
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	08 95       	ret
{
	if(pstructcpy_pin->enumport <MDIO_PORTA || pstructcpy_pin->enumport >MDIO_PORTD 
	|| pstructcpy_pin->enumpin <MDIO_PIN0 || pstructcpy_pin->enumpin >MDIO_PIN7
	||pstructcpy_pin->enumoutputlevel <MDIO_LOW || pstructcpy_pin->enumoutputlevel >MDIO_HIGH)
	{
		return 	LSTY_OUT_OF_RANGE ;
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	08 95       	ret
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	08 95       	ret
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	08 95       	ret
			{
				SET_BIT(PORTD_REGISTER,pstructcpy_pin->enumpin);
			}
			break;
		}
		return LSTY_EXECUTED_SUCCESSFULLY;
 85e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 860:	08 95       	ret

Disassembly of section .text.__vector_1:

00000912 <__vector_1>:



//isr functions to be called using pointer to function in main.c
ISR(INT0_vect)
{
 912:	1f 92       	push	r1
 914:	0f 92       	push	r0
 916:	0f b6       	in	r0, 0x3f	; 63
 918:	0f 92       	push	r0
 91a:	11 24       	eor	r1, r1
 91c:	2f 93       	push	r18
 91e:	3f 93       	push	r19
 920:	4f 93       	push	r20
 922:	5f 93       	push	r21
 924:	6f 93       	push	r22
 926:	7f 93       	push	r23
 928:	8f 93       	push	r24
 92a:	9f 93       	push	r25
 92c:	af 93       	push	r26
 92e:	bf 93       	push	r27
 930:	ef 93       	push	r30
 932:	ff 93       	push	r31
	EXINT_CALLBACK[0]();
 934:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <EXINT_CALLBACK>
 938:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <EXINT_CALLBACK+0x1>
 93c:	09 95       	icall
}
 93e:	ff 91       	pop	r31
 940:	ef 91       	pop	r30
 942:	bf 91       	pop	r27
 944:	af 91       	pop	r26
 946:	9f 91       	pop	r25
 948:	8f 91       	pop	r24
 94a:	7f 91       	pop	r23
 94c:	6f 91       	pop	r22
 94e:	5f 91       	pop	r21
 950:	4f 91       	pop	r20
 952:	3f 91       	pop	r19
 954:	2f 91       	pop	r18
 956:	0f 90       	pop	r0
 958:	0f be       	out	0x3f, r0	; 63
 95a:	0f 90       	pop	r0
 95c:	1f 90       	pop	r1
 95e:	18 95       	reti

Disassembly of section .text.__vector_2:

00000960 <__vector_2>:


ISR(INT1_vect)
{
 960:	1f 92       	push	r1
 962:	0f 92       	push	r0
 964:	0f b6       	in	r0, 0x3f	; 63
 966:	0f 92       	push	r0
 968:	11 24       	eor	r1, r1
 96a:	2f 93       	push	r18
 96c:	3f 93       	push	r19
 96e:	4f 93       	push	r20
 970:	5f 93       	push	r21
 972:	6f 93       	push	r22
 974:	7f 93       	push	r23
 976:	8f 93       	push	r24
 978:	9f 93       	push	r25
 97a:	af 93       	push	r26
 97c:	bf 93       	push	r27
 97e:	ef 93       	push	r30
 980:	ff 93       	push	r31
	EXINT_CALLBACK[1]();
 982:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <EXINT_CALLBACK+0x2>
 986:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <EXINT_CALLBACK+0x3>
 98a:	09 95       	icall
}
 98c:	ff 91       	pop	r31
 98e:	ef 91       	pop	r30
 990:	bf 91       	pop	r27
 992:	af 91       	pop	r26
 994:	9f 91       	pop	r25
 996:	8f 91       	pop	r24
 998:	7f 91       	pop	r23
 99a:	6f 91       	pop	r22
 99c:	5f 91       	pop	r21
 99e:	4f 91       	pop	r20
 9a0:	3f 91       	pop	r19
 9a2:	2f 91       	pop	r18
 9a4:	0f 90       	pop	r0
 9a6:	0f be       	out	0x3f, r0	; 63
 9a8:	0f 90       	pop	r0
 9aa:	1f 90       	pop	r1
 9ac:	18 95       	reti

Disassembly of section .text.__vector_3:

000009ae <__vector_3>:

ISR(INT2_vect)
{
 9ae:	1f 92       	push	r1
 9b0:	0f 92       	push	r0
 9b2:	0f b6       	in	r0, 0x3f	; 63
 9b4:	0f 92       	push	r0
 9b6:	11 24       	eor	r1, r1
 9b8:	2f 93       	push	r18
 9ba:	3f 93       	push	r19
 9bc:	4f 93       	push	r20
 9be:	5f 93       	push	r21
 9c0:	6f 93       	push	r22
 9c2:	7f 93       	push	r23
 9c4:	8f 93       	push	r24
 9c6:	9f 93       	push	r25
 9c8:	af 93       	push	r26
 9ca:	bf 93       	push	r27
 9cc:	ef 93       	push	r30
 9ce:	ff 93       	push	r31
	EXINT_CALLBACK[2]();
 9d0:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <EXINT_CALLBACK+0x4>
 9d4:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <EXINT_CALLBACK+0x5>
 9d8:	09 95       	icall
}
 9da:	ff 91       	pop	r31
 9dc:	ef 91       	pop	r30
 9de:	bf 91       	pop	r27
 9e0:	af 91       	pop	r26
 9e2:	9f 91       	pop	r25
 9e4:	8f 91       	pop	r24
 9e6:	7f 91       	pop	r23
 9e8:	6f 91       	pop	r22
 9ea:	5f 91       	pop	r21
 9ec:	4f 91       	pop	r20
 9ee:	3f 91       	pop	r19
 9f0:	2f 91       	pop	r18
 9f2:	0f 90       	pop	r0
 9f4:	0f be       	out	0x3f, r0	; 63
 9f6:	0f 90       	pop	r0
 9f8:	1f 90       	pop	r1
 9fa:	18 95       	reti

Disassembly of section .text.voidinitspi_slave_MSPI:

000008c0 <voidinitspi_slave_MSPI>:
	//ss  high again
	SS_PIN.enumoutputlevel=MDIO_HIGH;
	enumpinvalue_MDIO(&SS_PIN);
	
	return x;
}
 8c0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <MOSI_PIN+0x2>
 8c4:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <SCK_PIN+0x2>
 8c8:	81 e0       	ldi	r24, 0x01	; 1
 8ca:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <MISO_PIN+0x2>
 8ce:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <SS_PIN+0x2>
 8d2:	80 eb       	ldi	r24, 0xB0	; 176
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	0e 94 1d 03 	call	0x63a	; 0x63a <enumpindirection_MDIO>
 8da:	8c ea       	ldi	r24, 0xAC	; 172
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 1d 03 	call	0x63a	; 0x63a <enumpindirection_MDIO>
 8e2:	88 ea       	ldi	r24, 0xA8	; 168
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	0e 94 1d 03 	call	0x63a	; 0x63a <enumpindirection_MDIO>
 8ea:	84 eb       	ldi	r24, 0xB4	; 180
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	0e 94 1d 03 	call	0x63a	; 0x63a <enumpindirection_MDIO>
 8f2:	8d b1       	in	r24, 0x0d	; 13
 8f4:	80 64       	ori	r24, 0x40	; 64
 8f6:	8d b9       	out	0x0d, r24	; 13
 8f8:	8d b1       	in	r24, 0x0d	; 13
 8fa:	8f 7e       	andi	r24, 0xEF	; 239
 8fc:	8d b9       	out	0x0d, r24	; 13
 8fe:	8d b1       	in	r24, 0x0d	; 13
 900:	8f 7d       	andi	r24, 0xDF	; 223
 902:	8d b9       	out	0x0d, r24	; 13
 904:	8d b1       	in	r24, 0x0d	; 13
 906:	88 60       	ori	r24, 0x08	; 8
 908:	8d b9       	out	0x0d, r24	; 13
 90a:	8d b1       	in	r24, 0x0d	; 13
 90c:	84 60       	ori	r24, 0x04	; 4
 90e:	8d b9       	out	0x0d, r24	; 13
 910:	08 95       	ret

Disassembly of section .text.voidspi_slave_transmit_byte_MSPI:

00000a9e <voidspi_slave_transmit_byte_MSPI>:



void voidspi_slave_transmit_byte_MSPI(u8 data)
{
	SPDR=data;
 a9e:	8f b9       	out	0x0f, r24	; 15
 aa0:	08 95       	ret

Disassembly of section .text.u8spi_slave_receive_byte_MSPI:

00000a92 <u8spi_slave_receive_byte_MSPI>:
	//ss  high again
	SS_PIN.enumoutputlevel=MDIO_HIGH;
	enumpinvalue_MDIO(&SS_PIN);
	
	return x;
}
 a92:	77 9b       	sbis	0x0e, 7	; 14
 a94:	fe cf       	rjmp	.-4      	; 0xa92 <u8spi_slave_receive_byte_MSPI>
 a96:	8f b1       	in	r24, 0x0f	; 15
 a98:	08 95       	ret

Disassembly of section .text.__vector_11:

000009fc <__vector_11>:
}



ISR(TIMER0_OVF_vect)
{
 9fc:	1f 92       	push	r1
 9fe:	0f 92       	push	r0
 a00:	0f b6       	in	r0, 0x3f	; 63
 a02:	0f 92       	push	r0
 a04:	11 24       	eor	r1, r1
 a06:	8f 93       	push	r24
 a08:	9f 93       	push	r25
	u16counter_of_ovf_timer0++;	
 a0a:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <u16counter_of_ovf_timer0>
 a0e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <u16counter_of_ovf_timer0+0x1>
 a12:	01 96       	adiw	r24, 0x01	; 1
 a14:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <u16counter_of_ovf_timer0+0x1>
 a18:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <u16counter_of_ovf_timer0>
}
 a1c:	9f 91       	pop	r25
 a1e:	8f 91       	pop	r24
 a20:	0f 90       	pop	r0
 a22:	0f be       	out	0x3f, r0	; 63
 a24:	0f 90       	pop	r0
 a26:	1f 90       	pop	r1
 a28:	18 95       	reti

Disassembly of section .text.__vector_7:

00000862 <__vector_7>:
	return TCNT0;
}

void voidtimer1_ctc_interrupt_call_back(void (*ptr) (f32))
{
	timer1_ctc_int=ptr;	
 862:	1f 92       	push	r1
 864:	0f 92       	push	r0
 866:	0f b6       	in	r0, 0x3f	; 63
 868:	0f 92       	push	r0
 86a:	11 24       	eor	r1, r1
 86c:	2f 93       	push	r18
 86e:	3f 93       	push	r19
 870:	4f 93       	push	r20
 872:	5f 93       	push	r21
 874:	6f 93       	push	r22
 876:	7f 93       	push	r23
 878:	8f 93       	push	r24
 87a:	9f 93       	push	r25
 87c:	af 93       	push	r26
 87e:	bf 93       	push	r27
 880:	ef 93       	push	r30
 882:	ff 93       	push	r31
 884:	60 91 a4 00 	lds	r22, 0x00A4	; 0x8000a4 <x>
 888:	70 91 a5 00 	lds	r23, 0x00A5	; 0x8000a5 <x+0x1>
 88c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <x+0x2>
 890:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <x+0x3>
 894:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 898:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 89c:	09 95       	icall
 89e:	ff 91       	pop	r31
 8a0:	ef 91       	pop	r30
 8a2:	bf 91       	pop	r27
 8a4:	af 91       	pop	r26
 8a6:	9f 91       	pop	r25
 8a8:	8f 91       	pop	r24
 8aa:	7f 91       	pop	r23
 8ac:	6f 91       	pop	r22
 8ae:	5f 91       	pop	r21
 8b0:	4f 91       	pop	r20
 8b2:	3f 91       	pop	r19
 8b4:	2f 91       	pop	r18
 8b6:	0f 90       	pop	r0
 8b8:	0f be       	out	0x3f, r0	; 63
 8ba:	0f 90       	pop	r0
 8bc:	1f 90       	pop	r1
 8be:	18 95       	reti

Disassembly of section .text.libgcc:

00000a86 <__tablejump2__>:
 a86:	ee 0f       	add	r30, r30
 a88:	ff 1f       	adc	r31, r31
 a8a:	05 90       	lpm	r0, Z+
 a8c:	f4 91       	lpm	r31, Z
 a8e:	e0 2d       	mov	r30, r0
 a90:	09 94       	ijmp

Disassembly of section .text.__dummy_fini:

00000aa6 <_fini>:
 aa6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000aa8 <__funcs_on_exit>:
 aa8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000aaa <__simulator_exit>:
 aaa:	08 95       	ret

Disassembly of section .text.exit:

00000a54 <exit>:
 a54:	ec 01       	movw	r28, r24
 a56:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__funcs_on_exit>
 a5a:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_fini>
 a5e:	ce 01       	movw	r24, r28
 a60:	0e 94 55 05 	call	0xaaa	; 0xaaa <__simulator_exit>
 a64:	ce 01       	movw	r24, r28
 a66:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_Exit>

Disassembly of section .text._Exit:

00000aa2 <_Exit>:
 aa2:	0e 94 69 00 	call	0xd2	; 0xd2 <_exit>
